{"title":"JavaScript 类型判断","uid":"39a7541206c4f42537d81e311b664767","slug":"JavaScript-类型判断","date":"2022-03-22T19:40:32.000Z","updated":"2022-03-22T19:40:50.639Z","comments":true,"path":"api/articles/JavaScript-类型判断.json","keywords":null,"cover":null,"content":"<h1 id=\"JavaScript类型\"><a href=\"#JavaScript类型\" class=\"headerlink\" title=\"JavaScript类型\"></a>JavaScript类型</h1><h2 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h2><p>JavaScript基本类型有 <strong>6</strong> 种: <code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code>、<code>Symbol</code> 和 <code>BigInt</code>, 其中<code>Symbol</code>为 <code>ECMAScript 6</code> 新增类型。</p>\n<h2 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h2><p>JavaScript引用类型仅 <code>Object</code> 一种。 对象指内存中可以被标识符引用的一块区域, 在 JavaScript 中, 对象还可被视为一个<strong>无序键值对</strong>的集合 (散列表), 是某个特定引用类型的实例, 通常可使用 <code>new</code> 关键字后接构造函数 (constructor)创建:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let dateObject &#x3D; new Date(); &#x2F;&#x2F; 日期对象\nlet regExpObject &#x3D; new RegExp([0-9]); &#x2F;&#x2F; 正则表达式对象\nlet object &#x3D; new Object(); &#x2F;&#x2F; 自定义对象\nlet functionObject &#x3D; new Function(); &#x2F;&#x2F; 函数对象\nlet symbolObject &#x3D; new Symbol(); &#x2F;&#x2F; 符号对象\nlet booleanObject &#x3D; new Boolean(); &#x2F;&#x2F; Boolean 对象\nlet numberObject &#x3D; new Number(); &#x2F;&#x2F; Number 对象\nlet stringObject &#x3D; new String(); &#x2F;&#x2F; String 对象\nlet arrayObject &#x3D; new Array(); &#x2F;&#x2F; Array 对象\nlet mapObject &#x3D; new Map(); &#x2F;&#x2F; Map 对象\nlet weakMapObject &#x3D; new WeakMap(); &#x2F;&#x2F; WeakMap 对象\nlet setObject &#x3D; new Set(); &#x2F;&#x2F; Set 对象\nlet weakSetObject &#x3D; new WeakSet(); &#x2F;&#x2F; WeakSet 对象</code></pre>\n\n<p>其中:</p>\n<ol>\n<li><code>Boolean</code>、<code>Number</code> 和 <code>String</code> 对象为 <code>JavaScript</code> 的<strong>三大原始值包装类型</strong>, 每个原始值包装类型均映射到对应的同名原始类型, 如 <code>Boolean</code> 是对应<strong>数值</strong>的引用类型。</li>\n<li><code>Map</code>、<code>WeakMap</code>、<code>Set</code> 和 <code>WeakSet</code> 对象为 <code>JavaScript</code> 键控集 (keyed collections), 这些数据结构把对象的引用作为键。</li>\n</ol>\n<h3 id=\"BigInt-对象\"><a href=\"#BigInt-对象\" class=\"headerlink\" title=\"BigInt 对象\"></a><code>BigInt</code> 对象</h3><p><code>BigInt</code> 对象可通过 <code>BigInt</code> 函数生成 <code>BigInt</code> 类型的整数, 用以精确表示任意位数的整数。</p>\n<ol>\n<li><code>BigInt</code> 函数不能连同 <code>new</code> 关键字使用:<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let bigIntObject &#x3D; new BigInt(1); &#x2F;&#x2F; TypeError: BigInt is not a constructor</code></pre></li>\n<li><code>BigInt</code> 构造函数必须有参数, 且若参数不是 <code>Number</code> 类型, 将会自动调用 <code>Number()</code> 转换规则将其转换为 <code>BigInt</code>。无法解析成 <code>Number</code> 类型的参数 (如字符串) 或参数为小数, 均会报错。</li>\n</ol>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">BigInt(); &#x2F;&#x2F; TypeError: Cannot convert undefined to a BigInt\nBigInt(undefined); &#x2F;&#x2F; TypeError: Cannot convert undefined to a BigInt\nBigInt(null); &#x2F;&#x2F; TypeError: Cannot convert null to a BigInt\nBigInt(&quot;1a&quot;); &#x2F;&#x2F; SyntaxError: Cannot convert 1a to a BigInt\nBigInt(1.5); &#x2F;&#x2F; RangeError: The number 1.5 cannot be converted to a BigInt because it is not an integer\nBigInt(1); &#x2F;&#x2F; 1n\nBigInt(true); &#x2F;&#x2F; 1n\nBigInt(false); &#x2F;&#x2F; 0n</code></pre>\n<ol start=\"3\">\n<li><code>BigInt</code> 不可与 <code>Number</code> 混合操作, 若需要，则需使用 BigInt() 或 Number() 显示转换为同一类型后再执行相应操作。<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">1n + 1; &#x2F;&#x2F; TypeError: Cannot mix BigInt and other types, use explicit conversions\n1n + BigInt(1); &#x2F;&#x2F; 2n\nNumber(1n) + 1; &#x2F;&#x2F; 2\nMath.sqrt(4n); &#x2F;&#x2F; TypeError: Cannot convert a BigInt to a number</code></pre></li>\n<li>类型判断。<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">Object.prototype.toString.call(BigInt(1)); &#x2F;&#x2F; &quot;[object BigInt]&quot;\nObject.prototype.toString.call(1n); &#x2F;&#x2F; &quot;[object BigInt]&quot;\nObject.prototype.toString.call(BigInt); &#x2F;&#x2F; &quot;[object Function]&quot;\ntypeof 1n; &#x2F;&#x2F; &quot;bigint&quot;\ntypeof BigInt(1); &#x2F;&#x2F; &quot;bigint&quot;\ntypeof Object(1n); &#x2F;&#x2F; &quot;object&quot;\ntypeof 1n &#x3D;&#x3D;&#x3D; typeof BigInt(1); &#x2F;&#x2F; true\ntypeof 1n &#x3D;&#x3D;&#x3D; typeof Object(1n); &#x2F;&#x2F; false</code></pre></li>\n</ol>\n<h3 id=\"Global-对象和-Math-对象\"><a href=\"#Global-对象和-Math-对象\" class=\"headerlink\" title=\"Global 对象和 Math 对象\"></a><code>Global</code> 对象和 <code>Math</code> 对象</h3><p><code>JavaScript</code> 内置对象指任何由 <code>ECMAScript 6</code> 实现提供且与宿主环境无关, 在 <code>ECMAScript</code> 程序开始执行时便已存在的对象, 有 <code>Global</code> 和 <code>Math</code> 两个内置对象。</p>\n<p><code>Global</code> 对象是 <code>JavaScript</code> 中最为特别的对象: 在大多数 <code>ECMAScript</code> 实现中无法直接访问, 为兜底对象, 浏览器将 <code>Global</code> 对象实现为 <code>window</code> 对象。在全局作用域中定义的变量和函数都会变成 <code>Global</code> 对象的属性。</p>\n<p><code>Math</code> 对象为数学常数和函数提供了静态属性和静态方法, 它没有其他 <code>JavaScript</code> 对象类似的构造函数 <code>Math()</code>, 无须实例化, 所有属性和方法可直接在 <code>Math</code> 对象上调用。<code>Math</code> 对象不是函数对象:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">Object.prototype.toString.call(Math); &#x2F;&#x2F; &quot;[object Math]&quot;\nObject.prototype.toString.call(Math.sin); &#x2F;&#x2F; &quot;[object Function]&quot;\nObject.prototype.toString.call(Math.sin()); &#x2F;&#x2F; &quot;[object Number]&quot;</code></pre>\n\n\n\n\n<h2 id=\"基本类型与引用类型的异同\"><a href=\"#基本类型与引用类型的异同\" class=\"headerlink\" title=\"基本类型与引用类型的异同\"></a>基本类型与引用类型的异同</h2>","text":"JavaScript类型基本类型JavaScript基本类型有 6 种: Undefined、Null、Boolean、Number、String、Symbol 和 BigInt, 其中Symbol为 ECMAScript 6 新增类型。 引用类型JavaScript引用类型仅 ...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">JavaScript类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">基本类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">引用类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BigInt-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">BigInt 对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Global-%E5%AF%B9%E8%B1%A1%E5%92%8C-Math-%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">Global 对象和 Math 对象</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%BC%82%E5%90%8C\"><span class=\"toc-text\">基本类型与引用类型的异同</span></a></li></ol></li></ol>","author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"命令行初探","uid":"99327f04c23749b756244dec62781e9e","slug":"命令行初探","date":"2022-03-24T15:44:35.000Z","updated":"2022-03-24T15:45:28.641Z","comments":true,"path":"api/articles/命令行初探.json","keywords":null,"cover":null,"text":"cd 命令 (change directory)cd 命令主要用于切换当前目录。 cd 语法cd [&#x2F;d] [&lt;drive&gt;:][&lt;path&gt;] cd [..] chdir [&#x2F;d] [&lt;drive&gt;:][&lt;path&...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"命令行","slug":"命令行","count":1,"path":"api/tags/命令行.json"},{"name":"npm","slug":"npm","count":1,"path":"api/tags/npm.json"},{"name":"cd","slug":"cd","count":1,"path":"api/tags/cd.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}