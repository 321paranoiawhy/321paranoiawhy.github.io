{"title":"LeetCode-796-Rotate-String","uid":"afa662091cf53ca79a8858de12df085e","slug":"LeetCode-796-Rotate-String","date":"2022-04-07T14:48:10.000Z","updated":"2022-04-07T18:29:10.931Z","comments":true,"path":"api/articles/LeetCode-796-Rotate-String.json","keywords":null,"cover":[],"content":"<hr>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p><a href=\"https://leetcode.com/problems/rotate-string/\">LeetCode-796-Rotate-String</a></p>\n<p>Given two strings <code>s</code> and <code>goal</code>, return true if and only if <code>s</code> can become <code>goal</code> after some number of shifts on <code>s</code>.<br>A <strong>shift</strong> on <code>s</code> consists of moving the leftmost character of <code>s</code> to the rightmost position.</p>\n<ul>\n<li>For example, if <code>s</code> &#x3D; <code>&quot;abcde&quot;</code>, then it will be <code>&quot;bcdea&quot;</code> after one shift.</li>\n</ul>\n<p>Example1:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Input: s &#x3D; &quot;abcde&quot;, goal &#x3D; &quot;cdeab&quot;\nOutput: true</code></pre>\n<p>Example2:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">Input: s &#x3D; &quot;abcde&quot;, goal &#x3D; &quot;abced&quot;\nOutput: false</code></pre>\n\n<p>Contains:</p>\n<ul>\n<li>1 &lt;&#x3D; s.length, goal.length &lt;&#x3D; 100</li>\n<li>s and goal consist of lowercase English letters.</li>\n</ul>\n<hr>\n<h1 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h1><p>本题中, 对字符串每进行一次 <code>shift</code> 操作, 就相当于把字符串最左边字符 (首字符) 和最右边字符 (尾字符) 交换位置。</p>\n<p>对于字符串 <code>abcde</code>, 我们重复进行 <code>shift</code> 操作后可以发现: 在第 <code>5</code> (即 <code>s.length + 1</code>) 次操作后便回到了原来的 <code>s</code>, 这表明可以通过 <code>s.length + 1</code> 次 <code>shift</code> 操作得到 <code>s</code>。</p>\n<p><code>abcde</code> –&gt; <code>bcdea</code> –&gt; <code>cdeab</code> –&gt; <code>deabc</code> –&gt; <code>eabcd</code> –&gt; <code>abcde</code></p>\n<hr>\n<h2 id=\"算法一-最朴素的算法\"><a href=\"#算法一-最朴素的算法\" class=\"headerlink\" title=\"算法一 (最朴素的算法)\"></a>算法一 (最朴素的算法)</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function rotateString(s, goal) &#123;\n    let sLength &#x3D; s.length;\n    &#x2F;&#x2F; 深复制字符串 s\n    let temp &#x3D; s.slice();\n    for (let i &#x3D; 0; i &lt; sLength; i++) &#123;\n        if (temp &#x3D;&#x3D;&#x3D; goal) &#123;\n            return true;\n        &#125;\n        else &#123;\n            &#x2F;&#x2F; 更新 temp\n            temp &#x3D; temp.slice(1, sLength) + temp[0];\n        &#125;\n    &#125;\n    return false;\n&#125;\nconsole.log(rotateString(&quot;abcde&quot;, &quot;cdeab&quot;)); &#x2F;&#x2F; true\nconsole.log(rotateString(&quot;abcde&quot;, &quot;abced&quot;)); &#x2F;&#x2F; false\nconsole.log(rotateString(&quot;a&quot;, &quot;aa&quot;)); &#x2F;&#x2F; false\nconsole.log(rotateString(&quot;aa&quot;, &quot;a&quot;)); &#x2F;&#x2F; false</code></pre>\n\n<p>若使 <code>Output</code> 为 <code>[true, index]</code> 或 <code>[false, -1]</code>, 其中 <code>index</code> 表示对字符串 <code>s</code> 进行  <code>shift</code> 操作首次得到 <code>goal</code> 所需的操作次数, <code>-1</code> 表示无法通过 <code>shift</code> 操作得到 <code>goal</code>, 则算法一可改写如下:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function rotateString(s, goal) &#123;\n    let sLength &#x3D; s.length;\n    &#x2F;&#x2F; 深复制字符串 s\n    let temp &#x3D; s.slice();\n    for (let i &#x3D; 0; i &lt; sLength; i++) &#123;\n        if (temp &#x3D;&#x3D;&#x3D; goal) &#123;\n            return [true, i];\n        &#125;\n        else &#123;\n            &#x2F;&#x2F; 更新 temp\n            temp &#x3D; temp.slice(1, sLength) + temp[0];\n        &#125;\n    &#125;\n    return [false, -1];\n&#125;\nconsole.log(rotateString(&quot;abcde&quot;, &quot;cdeab&quot;)); &#x2F;&#x2F; [true, 2]\nconsole.log(rotateString(&quot;abcde&quot;, &quot;abced&quot;)); &#x2F;&#x2F; [false, -1]\nconsole.log(rotateString(&quot;a&quot;, &quot;aa&quot;)); &#x2F;&#x2F; [false, -1]\nconsole.log(rotateString(&quot;aa&quot;, &quot;a&quot;)); &#x2F;&#x2F; [false, -1]</code></pre>\n\n<hr>\n<h2 id=\"算法二-利用小技巧\"><a href=\"#算法二-利用小技巧\" class=\"headerlink\" title=\"算法二 (利用小技巧)\"></a>算法二 (利用小技巧)</h2><p>依次将每次操作时的首字符添加到原字符串 <code>s</code> 的尾部, 便可得到新字符串: <code>abcdeabcde</code>, 这正好就是将原字符串 <code>s</code> 重复一次。 因此只要将字符串 <code>s</code> 和字符串 <code>s</code> 拼接在一起, 就可以在新的字符串里搜索字符串 <code>goal</code>。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function rotateString(s, goal) &#123;\n    &#x2F;&#x2F; 若两个字符串长度不等,直接返回 false\n    &#x2F;&#x2F; 在两个字符串长度相等的前提下, 先复制字符串 s 两次, 再在此字符串中查找 goal\n    return (s.length &#x3D;&#x3D;&#x3D; goal.length) ? s.repeat(2).includes(goal) : false;\n&#125;\nconsole.log(rotateString(&quot;abcde&quot;, &quot;cdeab&quot;)); &#x2F;&#x2F; true\nconsole.log(rotateString(&quot;abcde&quot;, &quot;abced&quot;)); &#x2F;&#x2F; false\nconsole.log(rotateString(&quot;a&quot;, &quot;aa&quot;)); &#x2F;&#x2F; false\nconsole.log(rotateString(&quot;aa&quot;, &quot;a&quot;)); &#x2F;&#x2F; false</code></pre>\n\n<p>其中, <code>includes()</code> 方法是区分大小写的, 例如:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#39;Blue Whale&#39;.includes(&#39;blue&#39;); &#x2F;&#x2F; false\n&#39;Blue Whale&#39;.includes(&#39;Blue&#39;); &#x2F;&#x2F; true</code></pre>\n\n<p>若使 <code>Output</code> 为 <code>[true, index]</code> 或 <code>[false, -1]</code>, 其中 <code>index</code> 表示对字符串 <code>s</code> 进行  <code>shift</code> 操作首次得到 <code>goal</code> 所需的操作次数, <code>-1</code> 表示无法通过 <code>shift</code> 操作得到 <code>goal</code>, 则算法二可改写如下:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function rotateString(s, goal) &#123;\n    &#x2F;&#x2F; 当两字符串长度相等且查找结果不为 -1 时, 返回 [true, index]\n    &#x2F;&#x2F; 否则返回 [false, -1]\n    return ((s.length &#x3D;&#x3D;&#x3D; goal.length) &amp;&amp; (s.repeat(2).indexOf(goal) !&#x3D;&#x3D; -1)) ? [true, s.repeat(2).indexOf(goal)] : [false, -1];\n&#125;\nconsole.log(rotateString(&quot;abcde&quot;, &quot;cdeab&quot;)); &#x2F;&#x2F; [true, 2]\nconsole.log(rotateString(&quot;abcde&quot;, &quot;abced&quot;)); &#x2F;&#x2F; [false, -1]\nconsole.log(rotateString(&quot;a&quot;, &quot;aa&quot;)); &#x2F;&#x2F; [false, -1]\nconsole.log(rotateString(&quot;aa&quot;, &quot;a&quot;)); &#x2F;&#x2F; [false, -1]</code></pre>\n\n<p>其中, 字符串的 <code>indexOf()</code> 方法的返回值如下图所示:</p>\n<p><img src=\"/../images/String.prototype.indexOf.png\" alt=\"String.prototype.indexOf\"></p>\n<hr>\n<h1 id=\"统计一个字符串中某个字符或字符串出现的次数\"><a href=\"#统计一个字符串中某个字符或字符串出现的次数\" class=\"headerlink\" title=\"统计一个字符串中某个字符或字符串出现的次数\"></a>统计一个字符串中某个字符或字符串出现的次数</h1><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function repeatCounts(stringOne, stringTwo) &#123;\n    let count &#x3D; 0;\n    let index &#x3D; stringOne.indexOf(stringTwo);\n    &#x2F;&#x2F; 如果在 stringOne 中找到了 stringTwo, 即: index 不为 -1\n    while (index !&#x3D;&#x3D; -1) &#123;\n        count++;\n        &#x2F;&#x2F; 更新 index (从 index + 1 处开始查找)\n        index &#x3D; stringOne.indexOf(stringTwo, index + 1);\n    &#125;\n    return count;\n&#125;\nconsole.log(repeatCounts(&quot;abcde&quot;, &quot;f&quot;)); &#x2F;&#x2F; 0\nconsole.log(repeatCounts(&quot;f&quot;, &quot;abcde&quot;)); &#x2F;&#x2F; 0\nconsole.log(repeatCounts(&quot;abcde&quot;, &quot;c&quot;)); &#x2F;&#x2F; 1\nconsole.log(repeatCounts(&quot;abcce&quot;, &quot;c&quot;)); &#x2F;&#x2F; 2\nconsole.log(repeatCounts(&quot;abccc&quot;, &quot;c&quot;)); &#x2F;&#x2F; 3</code></pre>\n\n<hr>\n","text":" 题目描述LeetCode-796-Rotate-String Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s....","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":1,"path":"api/tags/LeetCode.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">算法思路</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E4%B8%80-%E6%9C%80%E6%9C%B4%E7%B4%A0%E7%9A%84%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">算法一 (最朴素的算法)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E4%BA%8C-%E5%88%A9%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7\"><span class=\"toc-text\">算法二 (利用小技巧)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%9F%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E6%9F%90%E4%B8%AA%E5%AD%97%E7%AC%A6%E6%88%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0\"><span class=\"toc-text\">统计一个字符串中某个字符或字符串出现的次数</span></a></li></ol>","author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"pip安装第三方库报错","uid":"10790f82c593c2090a644c2eb357ae58","slug":"pip安装第三方库报错","date":"2022-04-09T16:51:26.000Z","updated":"2022-04-09T18:14:56.738Z","comments":true,"path":"api/articles/pip安装第三方库报错.json","keywords":null,"cover":null,"text":" 报错示意# 安装第三方库 manim # 注意 package_name 为 manimgl (而非 manim) pip install manimgl WARNING: Retrying (Retry(total&#x3D;4, connect&#x3D;None, rea...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"mainm","slug":"mainm","count":1,"path":"api/tags/mainm.json"},{"name":"pip","slug":"pip","count":1,"path":"api/tags/pip.json"},{"name":"python","slug":"python","count":1,"path":"api/tags/python.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"JavaScript类型校验函数封装","uid":"327a088abef05846131669526f1edcfc","slug":"JavaScript类型校验函数封装","date":"2022-04-06T18:09:03.000Z","updated":"2022-04-07T10:53:34.953Z","comments":true,"path":"api/articles/JavaScript类型校验函数封装.json","keywords":null,"cover":null,"text":"类型校验函数的封装&#x2F;&#x2F; JavaScript 类型校验 checkType 函数, 返回值为字符串类型 function typeCheck(value) &#123; &#x2F;&#x2F; 1. null &#x2F;&#x2F; typeof() 方法...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":4,"path":"api/tags/JavaScript.json"},{"name":"类型校验","slug":"类型校验","count":1,"path":"api/tags/类型校验.json"},{"name":"封装函数","slug":"封装函数","count":1,"path":"api/tags/封装函数.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}