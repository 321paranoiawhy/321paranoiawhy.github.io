{"title":"JavaScript隐式类型转换","uid":"654476d034e547d801722bf0f52fe54c","slug":"JavaScript隐式类型转换","date":"2022-03-25T14:02:59.000Z","updated":"2022-04-07T14:38:33.060Z","comments":true,"path":"api/articles/JavaScript隐式类型转换.json","keywords":null,"cover":[],"content":"<h1 id=\"JavaScript-何时会发生隐式类型转换\"><a href=\"#JavaScript-何时会发生隐式类型转换\" class=\"headerlink\" title=\"JavaScript 何时会发生隐式类型转换\"></a><code>JavaScript</code> 何时会发生隐式类型转换</h1><p><code>JavaScript</code> 是弱类型语言, 当其期望得到某种数据类型而不得时, 会强制发生隐式类型转换。</p>\n<h2 id=\"自加操作符-和自减操作符\"><a href=\"#自加操作符-和自减操作符\" class=\"headerlink\" title=\"自加操作符 (++) 和自减操作符 (--)\"></a>自加操作符 (<code>++</code>) 和自减操作符 (<code>--</code>)</h2><p>自加操作符和自减操作符均有前缀 (<code>prefix</code>) 和后缀 (<code>postfix</code>) 之分:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">++i; &#x2F;&#x2F; 前缀自加操作符\ni++; &#x2F;&#x2F; 后缀自加操作符\n--i; &#x2F;&#x2F; 前缀自减操作符\ni--; &#x2F;&#x2F; 后缀自减操作符</code></pre>\n\n<p>对于前缀版自加或自减操作符, 变量的值在求值之前即被改变 (副作用); 而对于后缀版自加或自减操作符, 变量的值在求值之后才被改变 (滞后)。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let i &#x3D; 0;\nconsole.log(++i); &#x2F;&#x2F; 1\n\nlet j &#x3D; 0;\nconsole.log(j++); &#x2F;&#x2F; 0\nconsole.log(j); &#x2F;&#x2F; 1</code></pre>\n\n<p>这四个一元操作符均会将非数值类型的操作数转换为数值:</p>\n<ul>\n<li>对于可以转换为数值的字符串, 如字符串 <code>&quot;1&quot;</code>, 则直接转换为数值再执行相应的操作;</li>\n<li>对于无法转换为数值的字符串, 如字符串 <code>&quot;1a&quot;</code>、<code>&quot;a&quot;</code>, 则将变量转换为 <code>NaN(Not a Number)</code> 再执行相应的操作;</li>\n<li>对于布尔值, <code>true</code> 和 <code>false</code> 分别转换为数值 <code>1</code> 和 <code>0</code> 再执行相应的操作;</li>\n<li>对于对象, 则调用其 <code>valueOf()</code> 方法, 若无 <code>valueOf()</code> 方法, 则继续调用其 <code>toString()</code> 方法, 最后将得到的字符串转换为数值后再执行相应的操作。</li>\n</ul>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let stringOne &#x3D; &quot;1&quot;;\nconsole.log(++stringOne); &#x2F;&#x2F; 2\nlet stringTwo &#x3D; &quot;1a&quot;;\nconsole.log(++stringTwo); &#x2F;&#x2F; NaN\nlet booleanOne &#x3D; true;\nconsole.log(++booleanOne); &#x2F;&#x2F; 2\nlet booleanTwo &#x3D; false;\nconsole.log(++booleanTwo); &#x2F;&#x2F; 1\nlet objectOne &#x3D; &#123;a: 1&#125;;\nconsole.log(++objectOne); &#x2F;&#x2F; NaN\n\nlet objectTwo &#x3D; &#123;\n    valueOf() &#123;\n        return -1;\n    &#125; &#x2F;&#x2F; valueOf() 方法, 返回数值 -1\n&#125;;\nconsole.log(++objectTwo); &#x2F;&#x2F; 0</code></pre>\n\n<h2 id=\"一元加-、一元减-和乘性操作符-、-、\"><a href=\"#一元加-、一元减-和乘性操作符-、-、\" class=\"headerlink\" title=\"一元加 (+)、一元减 (-) 和乘性操作符 (*、/、%)\"></a>一元加 (<code>+</code>)、一元减 (<code>-</code>) 和乘性操作符 (<code>*</code>、<code>/</code>、<code>%</code>)</h2><p>一元加 (<code>+</code>) 、一元减 (<code>-</code>) 、乘 (<code>*</code>) 、除 (<code>/</code>) 和 取模 (<code>%</code>) 操作符, 会调用 <code>Number()</code> 转型函数将非 <code>Number</code> 类型转换为 <code>Number</code> 类型。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">+ true; &#x2F;&#x2F; 1\n+ false; &#x2F;&#x2F; 0\n+ undefined; &#x2F;&#x2F; NaN\n+ null; &#x2F;&#x2F; Number() 转型函数对 null 返回 0\n+ NaN; &#x2F;&#x2F; NaN\n+ &quot;&quot;; &#x2F;&#x2F; 0</code></pre>\n\n<h2 id=\"加性操作符\"><a href=\"#加性操作符\" class=\"headerlink\" title=\"加性操作符\"></a>加性操作符</h2><p>加性 (二元) 操作符分加法操作符 (<code>+</code>) 和减法操作符 (<code>-</code>), 分别用于求和和求差。</p>\n<p>减法操作符对非数值类型的操作数会按以下规则执行:</p>\n<ul>\n<li>如果操作数也不是对象, 则调用 <code>Number()</code> 转型函数将操作数转换为数值类型后再执行相应的操作;</li>\n<li>如果操作数是对象, 则调用其 <code>valueOf()</code> 方法, 若无 <code>valueOf()</code> 方法, 则继续调用其 <code>toString()</code> 方法, 最后将得到的字符串转换为数值后再执行相应的操作。</li>\n</ul>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">1 - &quot;a&quot;; &#x2F;&#x2F; NaN\n\nlet objectOne &#x3D; &#123;\n    valueOf() &#123;\n        return -1;\n    &#125; &#x2F;&#x2F; valueOf() 方法, 返回数值 -1\n&#125;;\n1 + objectOne; &#x2F;&#x2F; 0</code></pre>\n\n<p>加法操作符则与减法操作符有很大不同, 其原因为加法操作符还可以对字符串进行拼接, 因此加法操作符将按以下规则执行:</p>\n<ul>\n<li>两个操作数均为字符串, 则第二个字符串拼接至第一个字符串之后;</li>\n<li>有一个操作数是字符串, 则对另一个操作数调用 <code>toString()</code> 方法转换为字符串后进行拼接。</li>\n</ul>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&quot;a&quot; + &quot;b&quot;; &#x2F;&#x2F; &quot;ab&quot;\n1 + &quot;a&quot;; &#x2F;&#x2F; &quot;1a&quot;\n1 + &quot;&quot;; &quot;1&quot;\n\nlet objectOne &#x3D; &#123;\n    valueOf() &#123;\n        return &quot;a&quot;;\n    &#125; &#x2F;&#x2F; 重写 valueOf() 方法, 返回字符串 &quot;a&quot;\n&#125;;\nobjectOne + &quot;b&quot;; &#x2F;&#x2F; &quot;ab&quot;</code></pre>\n\n<h2 id=\"语句-流控制语句\"><a href=\"#语句-流控制语句\" class=\"headerlink\" title=\"语句 (流控制语句)\"></a>语句 (流控制语句)</h2><p>在 <code>JavaScript</code> 语句的条件表达式中期望得到一个布尔值, 如果不是布尔值, 则会调用 <code>Boolean()</code> 转型函数将其转换为布尔值。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript 六大假值 (falsey): false, undefined, null, &quot;&quot;, 0(+0, -0), NaN\n&#x2F;&#x2F; 除六大假值之外的所有数据类型均为真值 (truthy)\n\n&#x2F;&#x2F; if 语句, 循环体均执行一次 (先测试循环)\nif (!false)\n    console.log(&quot;This is !false.&quot;);\nif (!undefined)\n    console.log(&quot;This is !undefined.&quot;);\nif (!null)\n    console.log(&quot;This is !null.&quot;);\nif (!NaN)\n    console.log(&quot;This is !NaN.&quot;);\nif (!&quot;&quot;)\n    &#x2F;&#x2F; &quot; 须使用 \\ 转义打印输出\n    console.log(&quot;This is !\\&quot;\\&quot;.&quot;);\nif (!0)\n    console.log(&quot;This is !0.&quot;);\nif (!NaN)\n    console.log(&quot;This is !NaN.&quot;);\n\n&#x2F;&#x2F; do-while 语句 (后测试循环)\n&#x2F;&#x2F; 循环体仅执行一次\ndo &#123;\n    console.log(&quot;This is false.&quot;);\n&#125; while (false); &#x2F;&#x2F; This is false.\n&#x2F;&#x2F; 若无 break 语句, 循环体将无限执行; break 语句可强制提前跳出循环\ndo &#123;\n    console.log(&quot;This is !false.&quot;);\n    break;\n&#125; while (!false); &#x2F;&#x2F; This is !false.\n\n&#x2F;&#x2F; while 语句 (先测试循环)\n&#x2F;&#x2F; 循环体永不执行\nwhile (false) &#123;\n    console.log(&quot;This is false.&quot;);\n&#125;\n&#x2F;&#x2F; 若无 break 语句, 循环体将无限执行; break 语句可强制提前跳出循环\nwhile (!false) &#123;\n    console.log(&quot;This is !false.&quot;);\n    break;\n&#125; &#x2F;&#x2F; This is !false.\n\n&#x2F;&#x2F; for 语句 (先测试循环)\n&#x2F;&#x2F; 循环体永不执行\nfor (; false;) &#123;\n    console.log(&quot;This is false.&quot;);\n&#125;\n&#x2F;&#x2F; 若无 break 语句, 循环体将无限执行; break 语句可强制提前跳出循环\nfor (; !false;) &#123;\n    console.log(&quot;This is !false.&quot;);\n    break;\n&#125; &#x2F;&#x2F; This is !false.\n\n&#x2F;&#x2F; switch语句\nswitch (false) &#123;\n    case true: console.log(&quot;This is true.&quot;);\n    case false: console.log(&quot;This is false.&quot;);\n&#125; &#x2F;&#x2F; This is false.\nswitch (!false) &#123;\n    case true: console.log(&quot;This is true.&quot;);\n        break;\n    case false: console.log(&quot;This is false.&quot;);\n        break;\n&#125; &#x2F;&#x2F; This is true.</code></pre>\n\n<h1 id=\"非数值转换为数值\"><a href=\"#非数值转换为数值\" class=\"headerlink\" title=\"非数值转换为数值\"></a>非数值转换为数值</h1><p><code>JavaScript</code> 中有三个函数可以将非数值转换为数值: <code>Number()</code> 转型函数、<code>parseInt()</code> 和 <code>parseFloat()</code> 函数。</p>\n<h2 id=\"Number-转型函数\"><a href=\"#Number-转型函数\" class=\"headerlink\" title=\"Number() 转型函数\"></a><code>Number()</code> 转型函数</h2><p><img src=\"/../images/Number().png\" alt=\"Number()\"></p>\n<p><img src=\"/../images/ToNumberConversions.png\" alt=\"ToNumberConversions\"></p>\n<p>一元加操作符遵循 <code>Number()</code> 转型函数同样的非数值到数值的转换规则。</p>\n<h2 id=\"parseInt-函数\"><a href=\"#parseInt-函数\" class=\"headerlink\" title=\"parseInt() 函数\"></a><code>parseInt()</code> 函数</h2><p><code>parseInt()</code> 函数</p>\n<h1 id=\"非字符串转换为字符串\"><a href=\"#非字符串转换为字符串\" class=\"headerlink\" title=\"非字符串转换为字符串\"></a>非字符串转换为字符串</h1><p><img src=\"/../images/String().png\" alt=\"String()\"></p>\n<p><img src=\"/../images/ToStringConversions.png\" alt=\"ToStringConversions\"></p>\n<h1 id=\"非布尔值转换为布尔值\"><a href=\"#非布尔值转换为布尔值\" class=\"headerlink\" title=\"非布尔值转换为布尔值\"></a>非布尔值转换为布尔值</h1><p><img src=\"/../images/Boolean().png\" alt=\"Boolean()\"></p>\n<p><img src=\"/../images/ToBooleanConversions.png\" alt=\"ToBooleanConversions\"></p>\n","text":"JavaScript 何时会发生隐式类型转换JavaScript 是弱类型语言, 当其期望得到某种数据类型而不得时, 会强制发生隐式类型转换。 自加操作符 (++) 和自减操作符 (--)自加操作符和自减操作符均有前缀 (prefix) 和后缀 (postfix) 之分: ++i...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":11,"path":"api/tags/JavaScript.json"},{"name":"隐式类型转换","slug":"隐式类型转换","count":1,"path":"api/tags/隐式类型转换.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript-%E4%BD%95%E6%97%B6%E4%BC%9A%E5%8F%91%E7%94%9F%E9%9A%90%E5%BC%8F%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">JavaScript 何时会发生隐式类型转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A0%E6%93%8D%E4%BD%9C%E7%AC%A6-%E5%92%8C%E8%87%AA%E5%87%8F%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">自加操作符 (++) 和自减操作符 (--)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%85%83%E5%8A%A0-%E3%80%81%E4%B8%80%E5%85%83%E5%87%8F-%E5%92%8C%E4%B9%98%E6%80%A7%E6%93%8D%E4%BD%9C%E7%AC%A6-%E3%80%81-%E3%80%81\"><span class=\"toc-text\">一元加 (+)、一元减 (-) 和乘性操作符 (*、&#x2F;、%)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E6%80%A7%E6%93%8D%E4%BD%9C%E7%AC%A6\"><span class=\"toc-text\">加性操作符</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%AD%E5%8F%A5-%E6%B5%81%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">语句 (流控制语句)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E6%95%B0%E5%80%BC%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%95%B0%E5%80%BC\"><span class=\"toc-text\">非数值转换为数值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Number-%E8%BD%AC%E5%9E%8B%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">Number() 转型函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#parseInt-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">parseInt() 函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">非字符串转换为字符串</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E5%B8%83%E5%B0%94%E5%80%BC%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%B8%83%E5%B0%94%E5%80%BC\"><span class=\"toc-text\">非布尔值转换为布尔值</span></a></li></ol>","author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript数据类型及类型判断","uid":"7db2446ec2832237dd5967bf88c6a08e","slug":"JavaScript数据类型及类型判断","date":"2022-03-25T14:04:13.000Z","updated":"2022-04-07T14:51:02.620Z","comments":true,"path":"api/articles/JavaScript数据类型及类型判断.json","keywords":null,"cover":null,"text":"JavaScript类型基本类型JavaScript基本类型有 7 种: Undefined、Null、Boolean、Number、String、Symbol 和 BigInt, 其中Symbol为 ECMAScript 6 新增类型。 引用类型JavaScript引用类型仅 ...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":11,"path":"api/tags/JavaScript.json"},{"name":"基本类型","slug":"基本类型","count":1,"path":"api/tags/基本类型.json"},{"name":"引用类型","slug":"引用类型","count":1,"path":"api/tags/引用类型.json"},{"name":"类型判断","slug":"类型判断","count":1,"path":"api/tags/类型判断.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}