{"title":"浅析JavaScript伪随机数","uid":"7a05243233c4da00dcd738ef38ccbf4e","slug":"浅析JavaScript伪随机数","date":"2022-04-24T12:30:47.000Z","updated":"2022-04-24T14:14:21.200Z","comments":true,"path":"api/articles/浅析JavaScript伪随机数.json","keywords":null,"cover":null,"content":"<h1 id=\"Math-random\"><a href=\"#Math-random\" class=\"headerlink\" title=\"Math.random()\"></a><code>Math.random()</code></h1><p>ECMAScript 21.3.2.27 Math.random ():</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>Returns a Number value with positive sign, greater than or equal to +0 but strictly less than 1, chosen randomly or pseudo randomly with approximately uniform distribution over that range, using an implementation-defined algorithm or strategy. This function takes no arguments.</p>\n<p>Each Math.random function created for distinct realms must produce a distinct sequence of values from successive calls.</p>\n</div>\n<h2 id=\"Read-Also\"><a href=\"#Read-Also\" class=\"headerlink\" title=\"Read Also\"></a>Read Also</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random\">Math.random() - MDN</a></p>\n<p><a href=\"https://262.ecma-international.org/5.1/#sec-15.8.2.14\">ECMAScript Language Specification</a></p>\n<p><a href=\"https://v8.dev/blog/math-random\">There’s Math.random(), and then there’s Math.random()</a></p>\n<p><a href=\"https://www.zhihu.com/question/27796927/answer/38122142\">RednaxelaFX的回答 - 知乎</a></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Pseudorandom_number_generator\">Pseudorandom number generator(PRNG) - Wikipedia</a></p>\n<h2 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 基本用法\nMath.random(); &#x2F;&#x2F; 生成一个 0 ~ 1 之间的浮点型伪随机数 (含 0 不含 1 )\n&#x2F;&#x2F; 扩展用法\n&#x2F;&#x2F; 1. 生成指定区间的随机数\nlet getRandomFloat &#x3D; (min, max) &#x3D;&gt; Math.random() * (max - min) + min; &#x2F;&#x2F; 含 min 不含 max\n&#x2F;&#x2F; 2. 生成两数之间的随机整数\n&#x2F;&#x2F; min -&gt; Math.ceil(max) 向上取整\n&#x2F;&#x2F; max -&gt; Math.floor(max) 向下取整\nlet getRandomInt &#x3D; (min, max) &#x3D;&gt; Math.floor(Math.random() * (Math.floor(max) - Math.ceil(min))) + Math.ceil(min); &#x2F;&#x2F; 含 min 含 max\nlet getRandomInt &#x3D; (min, max) &#x3D;&gt; Math.floor(Math.random() * (Math.floor(max) - Math.ceil(min) + 1)) + Math.ceil(min); &#x2F;&#x2F; 含 min 和 max</code></pre>\n\n<h2 id=\"Math-random-底层算法\"><a href=\"#Math-random-底层算法\" class=\"headerlink\" title=\"Math.random() 底层算法\"></a><code>Math.random()</code> 底层算法</h2><p><a href=\"https://github.com/v8/v8/blob/dae6dfe08ba9810abbe7eee81f7c58e999ae8525/src/math.js#L144\">Chrome &#x2F; V8 - math.js Line 144</a></p>\n<p><a href=\"https://hg.mozilla.org/mozilla-central/file/fa91879c8428/js/src/jsmath.h#l105\">FireFox &#x2F; SpiderMonkey - jsmath.h Line 105</a></p>\n<p>以 <code>Chrome / V8</code> 为例,其最初采用的是 MWC1616 (multiply with carry, combining two 16-bit parts) 算法:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">uint32_t state0 &#x3D; 1;\nuint32_t state1 &#x3D; 2;\nuint32_t mwc1616() &#123;\n  state0 &#x3D; 18030 * (state0 &amp; 0xFFFF) + (state0 &gt;&gt; 16);\n  state1 &#x3D; 30903 * (state1 &amp; 0xFFFF) + (state1 &gt;&gt; 16);\n  return state0 &lt;&lt; 16 + (state1 &amp; 0xFFFF);\n&#125;</code></pre>\n\n<p>后来改用 <code>xorshift128+</code> 算法:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">uint64_t state0 &#x3D; 1;\nuint64_t state1 &#x3D; 2;\nuint64_t xorshift128plus() &#123;\n  uint64_t s1 &#x3D; state0;\n  uint64_t s0 &#x3D; state1;\n  state0 &#x3D; s0;\n  s1 ^&#x3D; s1 &lt;&lt; 23;\n  s1 ^&#x3D; s1 &gt;&gt; 17;\n  s1 ^&#x3D; s0;\n  s1 ^&#x3D; s0 &gt;&gt; 26;\n  state1 &#x3D; s1;\n  return state0 + state1;\n&#125;</code></pre>\n\n<h1 id=\"Crypto-getRandomValues\"><a href=\"#Crypto-getRandomValues\" class=\"headerlink\" title=\"Crypto.getRandomValues()\"></a><code>Crypto.getRandomValues()</code></h1><p><code>Crypto.getRandomValues()</code> 可获取符合密码学要求的安全的随机值。</p>\n<h2 id=\"Read-Also-1\"><a href=\"#Read-Also-1\" class=\"headerlink\" title=\"Read Also\"></a>Read Also</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Crypto/getRandomValues\">Crypto.getRandomValues() - MDN</a></p>\n<p><a href=\"https://nodejs.org/api/webcrypto.html#cryptogetrandomvaluestypedarray\">crypto.getRandomValues(typedArray) - Node.JS</a></p>\n<h2 id=\"Usage-1\"><a href=\"#Usage-1\" class=\"headerlink\" title=\"Usage\"></a>Usage</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 1. web 环境\ncrypto.getRandomValues(new Uint32Array(1))[0]; &#x2F;&#x2F; 生成一个 0 ~ 2^32-1 之间的无符号整数\nwindow.crypto.getRandomValues(new Uint32Array(1)); &#x2F;&#x2F; Uint32Array [ randomValue ]\nwindow.crypto.getRandomValues(new Uint32Array(1))[0]; &#x2F;&#x2F; randomValue\n&#x2F;&#x2F; 2. node 环境\ncrypto.getRandomValues(new Uint32Array(1))[0];\nwindow.crypto.getRandomValues(new Uint32Array(1))[0]; &#x2F;&#x2F; Uncaught ReferenceError: window is not defined</code></pre>\n\n<h1 id=\"GUID-Globally-Unique-Identifier\"><a href=\"#GUID-Globally-Unique-Identifier\" class=\"headerlink\" title=\"GUID (Globally Unique Identifier)\"></a><code>GUID (Globally Unique Identifier)</code></h1><p><a href=\"https://zh.wikipedia.org/wiki/%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%E7%AC%A6\">GUID - Wikipedia</a></p>\n<h1 id=\"UUID-Universally-Unique-Identifier\"><a href=\"#UUID-Universally-Unique-Identifier\" class=\"headerlink\" title=\"UUID (Universally Unique Identifier)\"></a><code>UUID (Universally Unique Identifier)</code></h1><p><a href=\"https://zh.wikipedia.org/wiki/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\">UUID - Wikipedia</a></p>\n<p><a href=\"https://www.rfc-editor.org/rfc/rfc4122.txt\">RFC 4122</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Crypto\">Crypto - MDN</a></p>\n<p><a href=\"https://nodejs.org/api/crypto.html#cryptorandomuuidoptions\">crypto.randomUUID([options]) - Node.js</a></p>\n<h2 id=\"随机生成-UUID-原生方法\"><a href=\"#随机生成-UUID-原生方法\" class=\"headerlink\" title=\"随机生成 UUID 原生方法\"></a>随机生成 <code>UUID</code> 原生方法</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; Crypto\n&#x2F;&#x2F; 1. web 环境\nglobal.crypto.randomUUID(); &#x2F;&#x2F; Uncaught ReferenceError: global is not defined\ncrypto.randomUUID(); &#x2F;&#x2F; 推荐使用\nself.crypto.randomUUID();\nwindow.crypto.randomUUID();\nthis.crypto.randomUUID();\nglobalThis.crypto.randomUUID();\n\n&#x2F;&#x2F; 2. node 环境\nself.crypto.randomUUID(); &#x2F;&#x2F; Uncaught ReferenceError: self is not defined\nwindow.crypto.randomUUID(); &#x2F;&#x2F; Uncaught ReferenceError: window is not defined\ncrypto.randomUUID(); &#x2F;&#x2F; 推荐使用\nthis.crypto.randomUUID();\nglobalThis.crypto.randomUUID();\nglobal.crypto.randomUUID();</code></pre>\n\n<p>另外, <code>CryptoJS</code> 在 <code>JavaScript</code> 上实现了标准和安全的加密算法:</p>\n<p><a href=\"https://cryptojs.gitbook.io/docs/\">CryptoJS Doucumentation - gitbook</a></p>\n<p><a href=\"https://github.com/brix/crypto-js\">CryptoJS GitHub</a></p>\n<p><a href=\"https://www.npmjs.com/package/crypto-js\">CryptoJS npm</a></p>\n<p><a href=\"https://devnote.pro/posts/10000051981222\">JavaScript 使用 CryptoJS 加解密</a></p>\n<h2 id=\"随机生成-UUID-手写实现\"><a href=\"#随机生成-UUID-手写实现\" class=\"headerlink\" title=\"随机生成 UUID 手写实现\"></a>随机生成 <code>UUID</code> 手写实现</h2><h1 id=\"随机数生成工具\"><a href=\"#随机数生成工具\" class=\"headerlink\" title=\"随机数生成工具\"></a>随机数生成工具</h1><p><a href=\"https://www.random.org/integers/\">RANDOM.ORG</a></p>\n<h1 id=\"At-last\"><a href=\"#At-last\" class=\"headerlink\" title=\"At last\"></a>At last</h1><h2 id=\"随机数理论\"><a href=\"#随机数理论\" class=\"headerlink\" title=\"随机数理论\"></a>随机数理论</h2><h2 id=\"随机数生成算法\"><a href=\"#随机数生成算法\" class=\"headerlink\" title=\"随机数生成算法\"></a>随机数生成算法</h2><h3 id=\"Fisher–Yates-shuffle\"><a href=\"#Fisher–Yates-shuffle\" class=\"headerlink\" title=\"Fisher–Yates shuffle\"></a><code>Fisher–Yates shuffle</code></h3><p><a href=\"https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\">Fisher–Yates shuffle - Wikipedia</a></p>\n","text":"Math.random()ECMAScript 21.3.2.27 Math.random (): 提示 Returns a Number value with positive sign, greater than or equal to +0 but strictly les...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":12,"path":"api/tags/JavaScript.json"},{"name":"浅析","slug":"浅析","count":1,"path":"api/tags/浅析.json"},{"name":"伪随机数","slug":"伪随机数","count":1,"path":"api/tags/伪随机数.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Math-random\"><span class=\"toc-text\">Math.random()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Read-Also\"><span class=\"toc-text\">Read Also</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Usage\"><span class=\"toc-text\">Usage</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Math-random-%E5%BA%95%E5%B1%82%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">Math.random() 底层算法</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Crypto-getRandomValues\"><span class=\"toc-text\">Crypto.getRandomValues()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Read-Also-1\"><span class=\"toc-text\">Read Also</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Usage-1\"><span class=\"toc-text\">Usage</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#GUID-Globally-Unique-Identifier\"><span class=\"toc-text\">GUID (Globally Unique Identifier)</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#UUID-Universally-Unique-Identifier\"><span class=\"toc-text\">UUID (Universally Unique Identifier)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90-UUID-%E5%8E%9F%E7%94%9F%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">随机生成 UUID 原生方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%90-UUID-%E6%89%8B%E5%86%99%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">随机生成 UUID 手写实现</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7\"><span class=\"toc-text\">随机数生成工具</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#At-last\"><span class=\"toc-text\">At last</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%90%86%E8%AE%BA\"><span class=\"toc-text\">随机数理论</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">随机数生成算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Fisher%E2%80%93Yates-shuffle\"><span class=\"toc-text\">Fisher–Yates shuffle</span></a></li></ol></li></ol></li></ol>","author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"JavaScript代码运行时间","uid":"efcb9823b8515508e8265d986121fffd","slug":"JavaScript代码运行时间","date":"2022-05-08T11:10:35.000Z","updated":"2022-05-10T12:53:45.783Z","comments":true,"path":"api/articles/JavaScript代码运行时间.json","keywords":null,"cover":null,"text":" 1. new Date().getTime()Date.prototype.getTime() let start &#x3D; new Date().getTime(); let end &#x3D; new Date().getTime(); console.log(&#9...","link":"","photos":[],"count_time":{"symbolsCount":500,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":12,"path":"api/tags/JavaScript.json"},{"name":"代码运行时间","slug":"代码运行时间","count":1,"path":"api/tags/代码运行时间.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CSS之水平居中和垂直居中","uid":"dd3415ed6272950eb1b537c4a572c566","slug":"CSS之水平居中和垂直居中","date":"2022-04-22T01:53:12.000Z","updated":"2022-04-22T02:00:09.184Z","comments":true,"path":"api/articles/CSS之水平居中和垂直居中.json","keywords":null,"cover":null,"text":"单一元素水平居中子元素相对于父元素居中","link":"","photos":[],"count_time":{"symbolsCount":19,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"CSS","slug":"CSS","count":5,"path":"api/tags/CSS.json"},{"name":"水平居中","slug":"水平居中","count":1,"path":"api/tags/水平居中.json"},{"name":"垂直居中","slug":"垂直居中","count":1,"path":"api/tags/垂直居中.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}