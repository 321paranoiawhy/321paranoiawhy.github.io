{"title":"Web-Components-Part-2","uid":"19c59505211190a413a77f90e46a1c80","slug":"Web-Components-Part-2","date":"2022-08-21T04:32:39.000Z","updated":"2022-08-22T06:02:29.822Z","comments":true,"path":"api/articles/Web-Components-Part-2.json","keywords":null,"cover":null,"content":"<hr>\n<h1 id=\"shadow-DOM-内设置内部元素样式\"><a href=\"#shadow-DOM-内设置内部元素样式\" class=\"headerlink\" title=\"shadow DOM 内设置内部元素样式\"></a><code>shadow DOM</code> 内设置内部元素样式</h1><p>Reference:</p>\n<ul>\n<li><a href=\"https://www.geeksforgeeks.org/how-to-create-a-style-tag-using-javascript/\">How to create a style tag using JavaScript? - GeeksforGeeks</a></li>\n<li><a href=\"https://www.zhangxinxu.com/wordpress/2021/02/web-components-import-css/\">Web Components中引入外部CSS的3种方法 - 张鑫旭</a></li>\n<li><a href=\"https://javascript.info/shadow-dom-style\">Shadow DOM styling - javascript.info</a></li>\n</ul>\n<hr>\n<h2 id=\"innerHTML-内插入-style-标签\"><a href=\"#innerHTML-内插入-style-标签\" class=\"headerlink\" title=\"innerHTML 内插入 style 标签\"></a><code>innerHTML</code> 内插入 <code>style</code> 标签</h2><pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- HTML --&gt;\n&lt;!-- text color is blue --&gt;\n&lt;div&gt;Div Text Outside 1&lt;&#x2F;div&gt;\n&lt;!-- text color is red --&gt;\n&lt;custom-element&gt;\n&lt;&#x2F;custom-element&gt;\n&lt;!-- text color is blue --&gt;\n&lt;div&gt;Div Text Outside 2&lt;&#x2F;div&gt;</code></pre>\n\n<pre class=\"line-numbers language-CSS\" data-language=\"CSS\"><code class=\"language-CSS\">&#x2F;* CSS *&#x2F;\ndiv &#123;\n  color: blue;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nclass CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;div&gt;Div Text Inside shadow DOM&lt;&#x2F;div&gt;\n    &lt;style&gt;\n    div &#123;\n        color: red;\n    &#125;\n    &lt;&#x2F;style&gt;\n    &#96;\n  &#125;\n&#125;\ncustomElements.define(&#39;custom-element&#39;, CustomElement);</code></pre>\n\n<ul>\n<li><a href=\"https://codepen.io/paraoiawhy/pen/poLGBeB\">Codepen Live Demo</a></li>\n</ul>\n<p>注意:</p>\n<ul>\n<li><p><code>shadow DOM</code> 中的元素样式不会影响外部元素样式, 其样式表只对内开放, 不会渗透出去。</p>\n</li>\n<li><p>外部元素样式同样不会影响 <code>shadow DOM</code> 中的元素样式。</p>\n</li>\n<li><p>如果外部元素在 <code>web components</code>内, 是其直接子元素, 且 <code>slot</code> 属性值与 <code>shadow DOM</code> 中 <code>slot</code> 元素的 <code>name</code> 属性值一致(即二者匹配), 则不仅有内容替换行为, 还会有样式替换行为, 即此时该外部元素的样式将是 <code>web components</code> 中 <code>slot</code> 元素最终呈现出来的样式。</p>\n</li>\n<li><p><a href=\"https://codepen.io/paraoiawhy/pen/NWYomgE\">Codepen Live Demo</a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"JavaScript-创建-style-标签\"><a href=\"#JavaScript-创建-style-标签\" class=\"headerlink\" title=\"JavaScript 创建 style 标签\"></a><code>JavaScript</code> 创建 <code>style</code> 标签</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nlet style &#x3D; document.createElement(&#39;style&#39;);\n&#x2F;&#x2F; 兼容 IE\nstyle.type &#x3D; &#39;text&#x2F;css&#39;;\n\n&#x2F;&#x2F; 1. 直接设置其 innerHTML\nstyle.innerHTML &#x3D; &#96;\n    div &#123;\n        color: blue;\n    &#125;\n&#96;;\n\n&#x2F;&#x2F; 2. 设置其 textContent\nstyle.textContent &#x3D; &#96;\n    div &#123;\n        color: blue;\n    &#125;\n&#96;;\n\n&#x2F;&#x2F; 3. 设置其 styleSheet.cssText\nstyle.styleSheet.cssText &#x3D; &#96;\n    div &#123;\n        color: blue;\n    &#125;\n&#96;;\n\n&#x2F;&#x2F; 以下两种插入方式均可\nthis.shadowRoot.append(style);\n&#x2F;&#x2F; this.shadowRoot.appendChild(style);</code></pre>\n\n<hr>\n<h2 id=\"innerHTML-内插入-link-标签\"><a href=\"#innerHTML-内插入-link-标签\" class=\"headerlink\" title=\"innerHTML 内插入 link 标签\"></a><code>innerHTML</code> 内插入 <code>link</code> 标签</h2><ul>\n<li><a href=\"https://lamplightdev.com/blog/2021/03/23/how-to-share-styles-in-the-shadow-dom/\">How to share styles in the Shadow DOM</a></li>\n</ul>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\n...\nthis.shadowRoot.innerHTML &#x3D; &#96;\n  &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#x2F;style.css&quot; &#x2F;&gt;\n  &lt;style&gt;\n    &#x2F;* your component specific styles go here *&#x2F;\n  &lt;&#x2F;style&gt;\n&#96;;\n...</code></pre>\n\n<hr>\n<h2 id=\"JavaScript-创建-link-标签\"><a href=\"#JavaScript-创建-link-标签\" class=\"headerlink\" title=\"JavaScript 创建 link 标签\"></a><code>JavaScript</code> 创建 <code>link</code> 标签</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nlet link &#x3D; document.createElement(&#39;link&#39;);\nlink.rel &#x3D; &#39;StyleSheet&#39;;\nlink.type &#x3D; &#39;text&#x2F;css&#39;;\nlink.href &#x3D; &#39;style.css&#39;;\n\n&#x2F;&#x2F; 以下两种插入方式均可\nthis.shadowRoot.append(link);\n&#x2F;&#x2F; this.shadowRoot.appendChild(link);</code></pre>\n\n<hr>\n<h2 id=\"import-引入外部样式表\"><a href=\"#import-引入外部样式表\" class=\"headerlink\" title=\"@import 引入外部样式表\"></a><code>@import</code> 引入外部样式表</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\n&#x2F;&#x2F; 第一种方式, 直接以相对路径引用外部样式表\n&lt;style&gt;@import &quot;.&#x2F;style.css&quot;;&lt;&#x2F;style&gt;\n&#x2F;&#x2F; 第二种方式, 利用 new URL()\n&lt;style&gt;@import &quot;$&#123;new URL(&quot;style.css&quot;, import.meta.url)&#125;&quot;;&lt;&#x2F;style&gt;\n\n&#x2F;&#x2F; 只需将上述字符串插入到 this.shadowRoot.innerHTML 即可</code></pre>\n\n<hr>\n<h2 id=\"import-from\"><a href=\"#import-from\" class=\"headerlink\" title=\"import...from...\"></a><code>import...from...</code></h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nimport style from &#39;.&#x2F;style.css&#39;;\n\nclass CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &quot;open&quot;\n    &#125;);\n\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;div&gt;Div Text Inside shadow DOM&lt;&#x2F;div&gt;\n    &#96;;\n\n    this.shadowRoot.adoptedStyleSheets &#x3D; [style];\n  &#125;\n&#125;\ncustomElements.define(&quot;custom-element&quot;, CustomElement);</code></pre>\n\n<hr>\n<h2 id=\"new-CSSStyleSheet\"><a href=\"#new-CSSStyleSheet\" class=\"headerlink\" title=\"new CSSStyleSheet()\"></a><code>new CSSStyleSheet()</code></h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nclass CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &quot;open&quot;\n    &#125;);\n\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;div&gt;Div Text Inside shadow DOM&lt;&#x2F;div&gt;\n    &#96;;\n\n    &#x2F;&#x2F; create new CSS style sheets using CSSStyleSheet constructor\n    this.currentCSSStyleSheet &#x3D; new CSSStyleSheet();\n    this.currentCSSStyleSheet.replace(&#96;\n    div &#123;\n        color: blue;\n    &#125;&#96;);\n\n    this.shadowRoot.adoptedStyleSheets &#x3D; [this.currentCSSStyleSheet];\n  &#125;\n&#125;\ncustomElements.define(&quot;custom-element&quot;, CustomElement);</code></pre>\n\n<p><code>CSSStyleSheet</code> 的一些特性如下:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nObject.prototype.toString.call(new CSSStyleSheet()); &#x2F;&#x2F; [object CSSStyleSheet]\n\n&#x2F;&#x2F; CSSStyleSheet 继承自 StyleSheet:\nnew CSSStyleSheet() instanceof StyleSheet; &#x2F;&#x2F; true\n\nObject.getPrototypeOf(new CSSStyleSheet()); &#x2F;&#x2F; CSSStyleSheet&#123;...&#125;</code></pre>\n\n<p><code>CSSStyleSheet</code> 除上述 <code>replace</code> 异步替换所有 <code>CSS</code> 样式外, 还有以下方法:</p>\n<ol>\n<li><code>replaceSync</code> 同步替换 <code>CSSStyleSheet</code> 所有 <code>CSS</code> 样式</li>\n<li><code>deleteRule()</code> 删除指定索引的 <code>CSS rule</code></li>\n<li><code>insertRule()</code> 在指定索引处插入 <code>CSS rule</code></li>\n</ol>\n<p><code>CSSStyleSheet</code> 的属性则有:</p>\n<ol>\n<li><code>cssRules</code></li>\n<li><code>ownerRule</code></li>\n</ol>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nnew CSSStyleSheet().cssRules instanceof CSSRuleList; &#x2F;&#x2F; true</code></pre>\n\n<p>Read Also:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet\">CSSStyleSheet - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/replace\">replace() - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/replaceSync\">replaceSync() - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/deleteRule\">deleteRule() - MDN</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule\">insertRule()</a></li>\n<li><a href=\"https://web.dev/constructable-stylesheets/\">Constructable Stylesheets - web.dev</a></li>\n<li><a href=\"https://wicg.github.io/construct-stylesheets/\">Constructable Stylesheet Objects</a></li>\n<li><a href=\"https://dev.to/overrideveloper/a-first-look-at-constructable-stylesheets-3ae\">A Quick Look at Constructable Stylesheets</a></li>\n<li><a href=\"https://github.com/calebdwilliams/construct-style-sheets\">Constructible style sheets polyfill - MDN</a></li>\n</ul>\n<hr>\n<h2 id=\"CSS-继承属性\"><a href=\"#CSS-继承属性\" class=\"headerlink\" title=\"CSS 继承属性\"></a><code>CSS</code> 继承属性</h2><p>如果内部元素本身无某一属性, 而 <code>shadowRoot</code> 定义有该属性且可被继承, 则内部元素将继承该属性值:</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- HTML --&gt;\n&lt;custom-element&gt;\n&lt;&#x2F;custom-element&gt;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nclass CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;div&gt;Div Text Inside shadow DOM&lt;&#x2F;div&gt;\n    &lt;style&gt;\n    :host &#123;\n        color: red;\n    &#125;\n    &lt;&#x2F;style&gt;\n    &#96;\n  &#125;\n&#125;\ncustomElements.define(&#39;custom-element&#39;, CustomElement);</code></pre>\n\n<p><code>div</code> 将继承 <code>:host</code> 内设置的红色文本颜色。</p>\n<p>如果 <code>shadowRoot</code> 定义有某属性且该属性可被继承, 而其内部元素本身也有该属性, 则内部元素将使用其自身属性值:</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- HTML --&gt;\n&lt;custom-element&gt;\n&lt;&#x2F;custom-element&gt;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nclass CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;div&gt;Div Text Inside shadow DOM&lt;&#x2F;div&gt;\n    &lt;style&gt;\n    :host &#123;\n        color: red;\n    &#125;\n    div &#123;\n        color: blue;\n    &#125;\n    &lt;&#x2F;style&gt;\n    &#96;\n  &#125;\n&#125;\ncustomElements.define(&#39;custom-element&#39;, CustomElement);</code></pre>\n\n<p><code>color: red</code> 的优先级低于 <code>color: blue</code>, 因而 <code>div</code> 的文本颜色是蓝色。</p>\n<p>如果在上述 <code>js</code> 中加入 <code>!important</code>, 则继承属性优先级将高于自有属性, <code>div</code> 的文本颜色将变为红色:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nclass CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;div&gt;Div Text Inside shadow DOM&lt;&#x2F;div&gt;\n    &lt;style&gt;\n    :host &#123;\n        color: red !important;\n    &#125;\n    div &#123;\n        color: blue;\n    &#125;\n    &lt;&#x2F;style&gt;\n    &#96;\n  &#125;\n&#125;\ncustomElements.define(&#39;custom-element&#39;, CustomElement);</code></pre>\n\n<p>可通过 <code>getPropertyPriority()</code> 获取 <code>DOM</code> 节点某个属性的优先级, 如果存在返回 ‘important’, 否则返回空字符串 ‘’:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nlet div &#x3D; document.querySelector(&#39;div&#39;);\nconsole.log(div.style.getPropertyPriority(&#39;color&#39;)); &#x2F;&#x2F; &#39;important&#39; 或者 &#39;&#39;</code></pre>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/getPropertyPriority\">CSSStyleDeclaration.getPropertyPriority() - MDN</a></li>\n</ul>\n<p>给 <code>setProperty()</code> 传入第三个参数 <code>important</code>, 可提高 <code>CSS</code> 样式优先级:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nlet div &#x3D; document.querySelector(&#39;div&#39;);\n\n&#x2F;&#x2F; 第三个参数可接收值: &#39;important&#39;, 关键字 &#39;undefined&#39; 或空字符串&#39;&#39;\ndiv.style.setProperty(&#39;color&#39;, &#39;blue&#39;, &#39;important&#39;);</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/setProperty\">CSSStyleDeclaration.setProperty() - MDN</a></p>\n<p>最后, 还可以在 <code>JavaScript</code> 中修改 <code>div</code> 的 <code>color</code> 属性值:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nclass CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;div&gt;Div Text Inside shadow DOM&lt;&#x2F;div&gt;\n    &lt;style&gt;\n    :host &#123;\n        color: red;\n    &#125;\n    div &#123;\n        color: blue;\n    &#125;\n    &lt;&#x2F;style&gt;\n    &#96;\n  &#125;\n&#125;\ncustomElements.define(&#39;custom-element&#39;, CustomElement);\n\nlet shadowRoot &#x3D; document.querySelector(&#39;custom-element&#39;).shadowRoot;\nshadowRoot.querySelector(&#39;div&#39;).style.color &#x3D; &#39;green&#39;;</code></pre>\n\n<p><code>div</code> 的文本颜色将是 <code>JavaScript</code> 设置的绿色。</p>\n<hr>\n<h3 id=\"更多讨论\"><a href=\"#更多讨论\" class=\"headerlink\" title=\"更多讨论\"></a>更多讨论</h3><p>到目前为止, <code>shadow DOM</code> 有三种方式可以更改其中元素样式, 分别是:</p>\n<ol>\n<li>继承属性</li>\n<li>自有属性</li>\n<li><code>JavaScript</code> 修改属性值</li>\n</ol>\n<p>这里对选择器只有一个 (如上文所述, <code>:host</code> 和 <code>div</code>) 的简单情形做一归纳:</p>\n<p>如果无 <code>!important</code>, 则上述三种方式的优先级为: 1 &lt; 2 &lt; 3.</p>\n<p>如果有 <code>!important</code>, 则有以下几种情形:</p>\n<ol>\n<li>1(!important) &lt; 2 &lt; 3</li>\n<li>1 &lt; 3 &lt; 2(!important)</li>\n</ol>\n<ul>\n<li><a href=\"https://codepen.io/paraoiawhy/pen/PoRVvgq\">Codepen Live Demo</a></li>\n</ul>\n<hr>\n<h1 id=\"shadow-DOM-内设置外部元素样式\"><a href=\"#shadow-DOM-内设置外部元素样式\" class=\"headerlink\" title=\"shadow DOM 内设置外部元素样式\"></a><code>shadow DOM</code> 内设置外部元素样式</h1><h2 id=\"slotted\"><a href=\"#slotted\" class=\"headerlink\" title=\"::slotted()\"></a><code>::slotted()</code></h2><p>这里, 外部元素指将替换内部 <code>slot</code> 元素的外部元素。</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- HTML --&gt;\n&lt;custom-element&gt;\n&lt;&#x2F;custom-element&gt;\n\n&lt;custom-element&gt;\n  &lt;div slot&#x3D;&#39;slot&#39;&gt;Slot Element (div) Outside&lt;&#x2F;div&gt;\n&lt;&#x2F;custom-element&gt;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nclass CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &quot;open&quot;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;div&gt;&lt;slot name&#x3D;&#39;slot&#39;&gt;Slot Element (div) Inside&lt;&#x2F;slot&gt;&lt;&#x2F;div&gt;\n    &lt;style&gt;\n    div &#123;\n        color: blue;\n    &#125;\n    ::slotted(div) &#123;\n      color: red;\n    &#125;\n    &lt;&#x2F;style&gt;\n    &#96;;\n  &#125;\n&#125;\ncustomElements.define(&quot;custom-element&quot;, CustomElement);</code></pre>\n\n<p>上例中如果没有 <code>::slotted(div)</code>, 则不论 <code>slot</code> 元素是否会被替换, <code>div</code> 始终显示蓝色。而正是 <code>::slotted(div)</code> 实现了在 <code>shadow DOM</code> 内部设置外部元素样式的效果, 即样式向外穿透, 但是仅限于 <code>slot</code> 元素相匹配的外部 <code>light DOM</code> 元素。</p>\n<ul>\n<li><a href=\"https://codepen.io/paraoiawhy/pen/bGvZpVP\">Codepen Live Demo</a></li>\n</ul>\n<hr>\n<h1 id=\"外部设置-shadow-DOM-内部元素样式\"><a href=\"#外部设置-shadow-DOM-内部元素样式\" class=\"headerlink\" title=\"外部设置 shadow DOM 内部元素样式\"></a>外部设置 <code>shadow DOM</code> 内部元素样式</h1><ul>\n<li><a href=\"https://web.dev/shadowdom-v1/#styling-a-component-from-the-outside\">Styling a component from the outside - web.dev</a></li>\n</ul>\n<p>不考虑 <code>!important</code>, 正常情况下, 外部样式优先级高于 <code>shadow DOM</code> 内部样式。</p>\n<hr>\n<h2 id=\"part\"><a href=\"#part\" class=\"headerlink\" title=\"::part()\"></a><code>::part()</code></h2><ul>\n<li><a href=\"https://css-tricks.com/styling-in-the-shadow-dom-with-css-shadow-parts/\">Styling in the Shadow DOM With CSS Shadow Parts - CSSTricks</a></li>\n</ul>\n<p>为了实现在外部设置 <code>shadow DOM</code> 内部元素样式, 须给  <code>shadow DOM</code> 内部元素以 <code>part</code> 属性, 从而在外部可通过 <code>::part()</code> 选择器选中 <code>shadow DOM</code> 内部元素。</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- HTML --&gt;\n&lt;custom-element&gt;\n&lt;&#x2F;custom-element&gt;</code></pre>\n\n<pre class=\"line-numbers language-CSS\" data-language=\"CSS\"><code class=\"language-CSS\">&#x2F;* CSS *&#x2F;\ncustom-element::part(div) &#123;\n  color: red;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nclass CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &quot;open&quot;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;div part&#x3D;&#39;div&#39;&gt;Div Text Inside shadow DOM&lt;&#x2F;div&gt;\n    &lt;style&gt;\n    div &#123;\n        color: blue;\n    &#125;\n    &lt;&#x2F;style&gt;\n    &#96;;\n  &#125;\n&#125;\ncustomElements.define(&quot;custom-element&quot;, CustomElement);</code></pre>\n\n<ul>\n<li><a href=\"https://codepen.io/paraoiawhy/pen/poLYyEg\">Codepen Live Demo</a></li>\n</ul>\n<hr>\n<h2 id=\"CSS-变量\"><a href=\"#CSS-变量\" class=\"headerlink\" title=\"CSS 变量\"></a><code>CSS 变量</code></h2><p>可使用 <code>CSS</code> 变量改变 <code>shadow DOM</code> 内部元素样式:</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;!-- HTML --&gt;\n&lt;custom-element&gt;\n&lt;&#x2F;custom-element&gt;</code></pre>\n\n<pre class=\"line-numbers language-CSS\" data-language=\"CSS\"><code class=\"language-CSS\">&#x2F;* CSS *&#x2F;\ncustom-element &#123;\n    --color: red;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; JavaScript\nclass CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;div&gt;Div Text Inside shadow DOM&lt;&#x2F;div&gt;\n    &lt;style&gt;\n    div &#123;\n        color: var(--color, blue);\n    &#125;\n    &lt;&#x2F;style&gt;\n    &#96;\n  &#125;\n&#125;\ncustomElements.define(&#39;custom-element&#39;, CustomElement);</code></pre>\n\n<p>上例中 <code>div</code> 的文本颜色是红色, 由 <code>--color</code> 控制。</p>\n<ul>\n<li><a href=\"https://codepen.io/paraoiawhy/pen/GRxeZNP\">Codepen Live Demo</a></li>\n</ul>\n<hr>\n","text":" shadow DOM 内设置内部元素样式Reference: How to create a style tag using JavaScript? - GeeksforGeeks Web Components中引入外部CSS的3种方法 - 张鑫旭 Shadow DOM sty...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[],"tags":[{"name":"Web Components","slug":"Web-Components","count":2,"path":"api/tags/Web-Components.json"},{"name":"Part 2","slug":"Part-2","count":1,"path":"api/tags/Part-2.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#shadow-DOM-%E5%86%85%E8%AE%BE%E7%BD%AE%E5%86%85%E9%83%A8%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">shadow DOM 内设置内部元素样式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#innerHTML-%E5%86%85%E6%8F%92%E5%85%A5-style-%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">innerHTML 内插入 style 标签</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript-%E5%88%9B%E5%BB%BA-style-%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">JavaScript 创建 style 标签</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#innerHTML-%E5%86%85%E6%8F%92%E5%85%A5-link-%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">innerHTML 内插入 link 标签</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#JavaScript-%E5%88%9B%E5%BB%BA-link-%E6%A0%87%E7%AD%BE\"><span class=\"toc-text\">JavaScript 创建 link 标签</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#import-%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8%E6%A0%B7%E5%BC%8F%E8%A1%A8\"><span class=\"toc-text\">@import 引入外部样式表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#import-from\"><span class=\"toc-text\">import...from...</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#new-CSSStyleSheet\"><span class=\"toc-text\">new CSSStyleSheet()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSS-%E7%BB%A7%E6%89%BF%E5%B1%9E%E6%80%A7\"><span class=\"toc-text\">CSS 继承属性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9B%B4%E5%A4%9A%E8%AE%A8%E8%AE%BA\"><span class=\"toc-text\">更多讨论</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#shadow-DOM-%E5%86%85%E8%AE%BE%E7%BD%AE%E5%A4%96%E9%83%A8%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">shadow DOM 内设置外部元素样式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#slotted\"><span class=\"toc-text\">::slotted()</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%96%E9%83%A8%E8%AE%BE%E7%BD%AE-shadow-DOM-%E5%86%85%E9%83%A8%E5%85%83%E7%B4%A0%E6%A0%B7%E5%BC%8F\"><span class=\"toc-text\">外部设置 shadow DOM 内部元素样式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#part\"><span class=\"toc-text\">::part()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#CSS-%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">CSS 变量</span></a></li></ol></li></ol>","author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Import-JSON-File","uid":"714f34ed9fabefc2c1be746108edd799","slug":"Import-JSON-File","date":"2022-08-21T06:56:41.000Z","updated":"2022-08-21T08:25:17.782Z","comments":true,"path":"api/articles/Import-JSON-File.json","keywords":null,"cover":null,"text":" import assertionsstatic importSee Here 从本地引入 test.json: import test from &#39;.&#x2F;test.json&#39; assert &#123;type: &#39;json&#39;&#125;...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JSON","slug":"JSON","count":1,"path":"api/tags/JSON.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Using-SVG-in-CSS-background-image","uid":"cd6e98e4ee4767f67b55e7c0d57b6257","slug":"Using-SVG-in-CSS-background-image","date":"2022-08-20T13:14:31.000Z","updated":"2022-08-20T15:07:18.936Z","comments":true,"path":"api/articles/Using-SVG-in-CSS-background-image.json","keywords":null,"cover":null,"text":"background-imagebackground-image 的值可以是 none 或者 一个合法的 &lt;image&gt; 值。 &#x2F;* 1. network image *&#x2F; div &#123; background-image: url(http...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"CSS","slug":"CSS","count":7,"path":"api/tags/CSS.json"},{"name":"SVG","slug":"SVG","count":1,"path":"api/tags/SVG.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}