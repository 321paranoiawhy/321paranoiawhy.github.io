{"title":"JavaScript数组连续n项的最大和","uid":"0be77bbaa4c80d723f54cec9a9ed8e0e","slug":"JavaScript数组连续n项的最大和","date":"2022-05-10T12:24:19.000Z","updated":"2022-05-10T12:30:48.116Z","comments":true,"path":"api/articles/JavaScript数组连续n项的最大和.json","keywords":null,"cover":null,"content":"<hr>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 求数组连续 n 项的最大和\nfunction nNumbersMaxSum(array, n) &#123;\n    &#x2F;&#x2F; 假值处理\n    &#x2F;&#x2F; 第一种方式, 虽然去除了假值, 但其位置也被删除了, 新数组长度有所变化\n    let newArray &#x3D; array.filter(Boolean);\n    &#x2F;&#x2F; 第二种方式, 既去除了假值, 同时还保留了其占位 (0 填充), 假值均按 0 计算\n    let anotherArray &#x3D; array.flatMap(item &#x3D;&gt; !!item ? item : 0);\n    let sumArray &#x3D; [];\n    for (let i &#x3D; 0; i &lt; array.length - n + 1; i++) &#123;\n        &#x2F;&#x2F; slice 取出数组中连续 n 项\n        &#x2F;&#x2F; reduce 求和\n        &#x2F;&#x2F; push 到 sumArray 中\n        sumArray.push(array.slice(i, i + n).reduce((prev, cur) &#x3D;&gt; prev + cur));\n    &#125;\n    &#x2F;&#x2F; 1. 返回数组连续 n 项的最大和 (sumArray 数组中最大值)\n    return Math.max(...sumArray);\n\n    &#x2F;&#x2F; 2. 返回 首个 和最大的 连续n 项的 首项索引 (其余项索引可通过连续加一得到)\n    &#x2F;&#x2F; return sumArray.indexOf(Math.max(...sumArray));\n\n    &#x2F;&#x2F; 3. 进一步地, 还可以返回一个新数组: 原数组中使得和最大的的连续 n 项 (首个)\n    &#x2F;&#x2F; return array.slice(sumArray.indexOf(Math.max(...sumArray)), sumArray.indexOf(Math.max(...sumArray)) + n);\n\n    &#x2F;&#x2F; 4. 更进一步, 返回 所有 和最大的连续 n 项的 首项索引\n    &#x2F;&#x2F; return sumArray.flatMap((item, index) &#x3D;&gt; item &#x3D;&#x3D;&#x3D; Math.max(...sumArray) ? index : []);\n\n    &#x2F;&#x2F; 5. 返回结果: 由数组连续 n 项最小和 数组连续 n 项最大和 组成的长度为 2 的数组\n    &#x2F;&#x2F; return [Math.min(...sumArray), Math.max(...sumArray)];\n&#125;\n\nlet array &#x3D; [2, 5, 3, 4, 6];\n\n&#x2F;&#x2F; 1. 10 13 18\n&#x2F;&#x2F; 2. 3 2 1\n&#x2F;&#x2F; 3. [4, 6] [3, 4, 6] [5, 3, 4, 6]\n&#x2F;&#x2F; 4. [3] [2] [1]\n&#x2F;&#x2F; 5. [7, 10] [10, 13] [14, 18]\nconsole.log(nNumbersMaxSum(array, 2)); &#x2F;&#x2F; 10\nconsole.log(nNumbersMaxSum(array, 3)); &#x2F;&#x2F; 13\nconsole.log(nNumbersMaxSum(array, 4)); &#x2F;&#x2F; 18\n\n\nlet arrayTwo &#x3D; [2, 5, 3, 4, 6, 4];\n\n&#x2F;&#x2F; 返回 所有 和最大的连续 n 项的 首项索引\n&#x2F;&#x2F; 4. [3, 4]\nconsole.log(nNumbersMaxSum(arrayTwo, 2)); &#x2F;&#x2F; 10\n\n&#x2F;&#x2F; 求数组连续 n 项的最大乘积\nfunction nNumbersMaxProduct(array, n) &#123;\n    &#x2F;&#x2F; 假值处理\n    &#x2F;&#x2F; 第一种方式, 虽然去除了假值, 但其位置也被删除了, 新数组长度有所变化\n    let newArray &#x3D; array.filter(Boolean);\n    &#x2F;&#x2F; 第二种方式, 既去除了假值, 同时还保留了其占位 (1 填充), 假值均按 1 计算\n    let anotherArray &#x3D; array.flatMap(item &#x3D;&gt; !!item ? item : 1);\n    let productArray &#x3D; [];\n    for (let i &#x3D; 0; i &lt; array.length - n + 1; i++) &#123;\n        &#x2F;&#x2F; slice 取出数组中连续 n 项\n        &#x2F;&#x2F; reduce 求乘积\n        &#x2F;&#x2F; push 到 productArray 中\n        productArray.push(array.slice(i, i + n).reduce((prev, cur) &#x3D;&gt; prev * cur));\n    &#125;\n    &#x2F;&#x2F; 1. 返回数组连续 n 项的最大和 (productArray 数组中最大值)\n    return Math.max(...productArray);\n\n    &#x2F;&#x2F; 2. 返回 首个 和最大的 连续n 项的 首项索引 (其余项索引可通过连续加一得到)\n    &#x2F;&#x2F; return productArray.indexOf(Math.max(...productArray));\n\n    &#x2F;&#x2F; 3. 进一步地, 还可以返回一个新数组: 原数组中使得和最大的连续 n 项 (首个)\n    &#x2F;&#x2F; return array.slice(productArray.indexOf(Math.max(...productArray)), productArray.indexOf(Math.max(...productArray)) + n);\n\n    &#x2F;&#x2F; 4. 更进一步, 返回 所有 和最大的连续 n 项的 首项索引\n    &#x2F;&#x2F; return productArray.flatMap((item, index) &#x3D;&gt; item &#x3D;&#x3D;&#x3D; Math.max(...productArray) ? index : []);\n\n    &#x2F;&#x2F; 5. 返回结果: 由数组连续 n 项最小和 数组连续 n 项最大和 组成的长度为 2 的数组\n    &#x2F;&#x2F; return [Math.min(...productArray), Math.max(...productArray)];\n&#125;\n\n&#x2F;&#x2F; 1. 24 72 360\n&#x2F;&#x2F; 2. 3 2 1\n&#x2F;&#x2F; 3. [4, 6] [3, 4, 6] [5, 3, 4, 6]\n&#x2F;&#x2F; 4. [3] [2] [1]\n&#x2F;&#x2F; 5. [10, 24] [30, 72] [120, 360]\nconsole.log(nNumbersMaxProduct(array, 2)); &#x2F;&#x2F; 24\nconsole.log(nNumbersMaxProduct(array, 3)); &#x2F;&#x2F; 72\nconsole.log(nNumbersMaxProduct(array, 4)); &#x2F;&#x2F; 360</code></pre>\n\n<hr>\n","text":" &#x2F;&#x2F; 求数组连续 n 项的最大和 function nNumbersMaxSum(array, n) &#123; &#x2F;&#x2F; 假值处理 &#x2F;&#x2F; 第一种方式, 虽然去除了假值, 但其位置也被删除了, 新数组长度有所变化 let...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"数组","slug":"数组","count":2,"path":"api/tags/数组.json"},{"name":"连续n项的最大和","slug":"连续n项的最大和","count":1,"path":"api/tags/连续n项的最大和.json"}],"toc":"","author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LeetCode-53-Maximum-Subarray","uid":"8a91a6c7f25eaf2685bd06ff2df6a231","slug":"LeetCode-53-Maximum-Subarray","date":"2022-05-10T12:25:45.000Z","updated":"2022-05-10T12:31:47.840Z","comments":true,"path":"api/articles/LeetCode-53-Maximum-Subarray.json","keywords":null,"cover":null,"text":" &#x2F;&#x2F; LeetCode-53 https:&#x2F;&#x2F;leetcode.cn&#x2F;problems&#x2F;maximum-subarray&#x2F; &#x2F;&#x2F; 剑指Offer-42 https:&#x2F;&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"LeetCode","slug":"LeetCode","count":5,"path":"api/tags/LeetCode.json"},{"name":"53","slug":"53","count":1,"path":"api/tags/53.json"},{"name":"最大子数组","slug":"最大子数组","count":1,"path":"api/tags/最大子数组.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaScript代码运行时间","uid":"efcb9823b8515508e8265d986121fffd","slug":"JavaScript代码运行时间","date":"2022-05-08T11:10:35.000Z","updated":"2022-05-10T12:53:45.783Z","comments":true,"path":"api/articles/JavaScript代码运行时间.json","keywords":null,"cover":null,"text":" 1. new Date().getTime()Date.prototype.getTime() let start &#x3D; new Date().getTime(); let end &#x3D; new Date().getTime(); console.log(&#9...","link":"","photos":[],"count_time":{"symbolsCount":500,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"代码运行时间","slug":"代码运行时间","count":1,"path":"api/tags/代码运行时间.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}