{"title":"LeetCode-剑指Offer-15-二进制中1的个数","uid":"6476889812499529d67e180547b73424","slug":"LeetCode-剑指Offer-15-二进制中1的个数","date":"2022-04-11T13:15:22.000Z","updated":"2022-04-12T13:54:57.734Z","comments":true,"path":"api/articles/LeetCode-剑指Offer-15-二进制中1的个数.json","keywords":null,"cover":null,"content":"<hr>\n<h1 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h1><p>本题同 <code>LeetCode-191-位1的个数</code>。</p>\n<p>编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为 <a href=\"https://en.wikipedia.org/wiki/Hamming_weight\">Hamming weight</a> )。</p>\n<p>示例1</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：n &#x3D; 11 (控制台输入 00000000000000000000000000001011)\n输出：3\n解释：输入的二进制串 00000000000000000000000000001011 中，共有 3 位为 &#39;1&#39;。</code></pre>\n\n<p>示例2</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：n &#x3D; 128 (控制台输入 00000000000000000000000010000000)\n输出：1\n解释：输入的二进制串 00000000000000000000000010000000 中，共有 1 位为 &#39;1&#39;。</code></pre>\n\n<p>示例3</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入：n &#x3D; 4294967293 (控制台输入 11111111111111111111111111111101，部分语言中 n &#x3D; -3）\n输出：31\n解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 &#39;1&#39;。</code></pre>\n\n<p>提示:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">输入必须是长度为 32 的 二进制串 。</code></pre>\n\n<h1 id=\"暴力循环\"><a href=\"#暴力循环\" class=\"headerlink\" title=\"暴力循环\"></a>暴力循环</h1><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function hammingWeight(number) &#123;\n    &#x2F;&#x2F; 数字转换为二进制下的字符串\n    number &#x3D; number.toString(2);\n    let count &#x3D; 0;\n    &#x2F;&#x2F; 遍历字符串\n    for (let i &#x3D; 0; i &lt; number.length; i++) &#123;\n        &#x2F;&#x2F; 使用 charAt() 方法获取字符串中的每一个字符\n        &#x2F;&#x2F; 注意与 字符串 1 比较, 而不是数字 1\n        if (number.charAt(i) &#x3D;&#x3D;&#x3D; &quot;1&quot;) &#123;\n            count +&#x3D; 1;\n        &#125;\n    &#125;\n    return count;\n&#125;\nconsole.log(hammingWeight(11)); &#x2F;&#x2F; 3\nconsole.log(hammingWeight(128)); &#x2F;&#x2F; 1\nconsole.log(hammingWeight(4294967293)); &#x2F;&#x2F; 31</code></pre>\n\n<h1 id=\"按位与\"><a href=\"#按位与\" class=\"headerlink\" title=\"按位与\"></a>按位与</h1><p>按位与操作符将两个二进制数的每一位对齐, 当且仅当某位上均为 <code>1</code> 时该位结果为 <code>1</code>, 否则为 <code>0</code>。<br>例如:<br><code>1</code> 的二进制表示为 <code>1</code> , <code>2</code> 的二进制表示为 <code>10</code> , <code>3</code> 的二进制表示为 <code>11</code> , <code>4</code> 的二进制表示为 <code>100</code> , 因此有以下结果:</p>\n<p><code>1&amp;1 = 1, 2&amp;1=0, 3&amp;1=1, 4&amp;1=0</code></p>\n<p>由于 <code>1</code> 的二进制表示中仅有第 <code>0</code> 位为 <code>1</code> , 所以, 任何一个数与 <code>1</code> 按位与时, 第 <code>0</code> 位之前所有位都将为 <code>0</code> , 第 <code>0</code> 位结果则取决于这个数第 <code>0</code> 位是否为 <code>1</code> : 第 <code>0</code> 位为 <code>1</code> 时, 结果为 <code>1</code> , 否则为 <code>0</code> 。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; a &amp; 1\nfunction hammingWeight(number) &#123;\n    let count &#x3D; 0;\n    for (let i &#x3D; 0; i &lt; 32; i++) &#123;\n        &#x2F;&#x2F; if (number &amp; 1 &#x3D;&#x3D;&#x3D; 1) &#123;\n        &#x2F;&#x2F;     count +&#x3D; 1;\n        &#x2F;&#x2F;     number &#x3D; number &gt;&gt; 1;\n        &#x2F;&#x2F; &#125;\n        &#x2F;&#x2F; else &#123; number &#x3D; number &gt;&gt; 1; &#125;\n        number &amp; 1 &#x3D;&#x3D;&#x3D; 1 ? (count +&#x3D; 1, number &#x3D; number &gt;&gt; 1) : (number &#x3D; number &gt;&gt; 1)\n    &#125;\n    return count;\n&#125;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; a &amp; (a - 1)\nfunction hammingWeight(number) &#123;\n    let count &#x3D; 0;\n    while (number) &#123;\n        number &#x3D; number &amp; (number - 1);\n        count++;\n    &#125;\n    return count;\n&#125;\nconsole.log(hammingWeight(27)); &#x2F;&#x2F; 4 (11011 -&gt; 11000 -&gt; 10000 -&gt; 00000)</code></pre>\n\n","text":" 题目描述本题同 LeetCode-191-位1的个数。 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为 Hamming weight )。 示例1 输入：n &#x3D; 11 (控制台输入 0000000000...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":5,"path":"api/tags/LeetCode.json"},{"name":"剑指Offer","slug":"剑指Offer","count":1,"path":"api/tags/剑指Offer.json"},{"name":"二进制","slug":"二进制","count":1,"path":"api/tags/二进制.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%A2%98%E7%9B%AE%E6%8F%8F%E8%BF%B0\"><span class=\"toc-text\">题目描述</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9A%B4%E5%8A%9B%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">暴力循环</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%89%E4%BD%8D%E4%B8%8E\"><span class=\"toc-text\">按位与</span></a></li></ol>","author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"精确覆盖问题","uid":"1001f33dad10400ea5f367d8a08e122a","slug":"精确覆盖问题","date":"2022-04-12T09:10:46.000Z","updated":"2022-04-12T09:12:34.442Z","comments":true,"path":"api/articles/精确覆盖问题.json","keywords":null,"cover":null,"text":" 精确覆盖问题Exact cover wiki Dancing Links OI Wiki A Sudoku Solver in Java implementing Knuth’s Dancing Links Algorithm 数独规则回顾 每个格子只能填入 1 ~ 9 中的一...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaScript数组之奇技淫巧","uid":"91d29442500deeb82a763ac9ac0b6005","slug":"JavaScript数组之奇技淫巧","date":"2022-04-11T11:22:17.000Z","updated":"2022-04-25T02:40:23.799Z","comments":true,"path":"api/articles/JavaScript数组之奇技淫巧.json","keywords":null,"cover":null,"text":" 快速创建有规律数组 元素为 0 ~ 99 的数组&#x2F;&#x2F; new Array(100) 创建一个长度为 100 的空数组 (new 关键字可省略) &#x2F;&#x2F; keys() 返回数组索引的一个迭代器 &#x2F;&#x2F; Array.from(...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":11,"path":"api/tags/JavaScript.json"},{"name":"数组","slug":"数组","count":2,"path":"api/tags/数组.json"},{"name":"奇技淫巧","slug":"奇技淫巧","count":1,"path":"api/tags/奇技淫巧.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}