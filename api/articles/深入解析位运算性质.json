{"title":"深入解析位运算性质","uid":"d59a8ff0fbd74225a125fea75d954925","slug":"深入解析位运算性质","date":"2022-04-12T09:29:31.000Z","updated":"2022-04-17T16:37:42.363Z","comments":true,"path":"api/articles/深入解析位运算性质.json","keywords":null,"cover":[],"content":"<hr>\n<h1 id=\"二进制回顾\"><a href=\"#二进制回顾\" class=\"headerlink\" title=\"二进制回顾\"></a>二进制回顾</h1><h2 id=\"十进制整数转换为二进制\"><a href=\"#十进制整数转换为二进制\" class=\"headerlink\" title=\"十进制整数转换为二进制\"></a>十进制整数转换为二进制</h2><p>十进制整数转换为二进制可采用 <strong>除2取余, 逆序排列 (短除法)</strong> ：</p>\n<p><img src=\"/../images/shortdiv.svg\" alt=\"短除法\"></p>\n<hr>\n<h2 id=\"十进制小数转换为二进制\"><a href=\"#十进制小数转换为二进制\" class=\"headerlink\" title=\"十进制小数转换为二进制\"></a>十进制小数转换为二进制</h2><p>十进制整数转换为二进制可采用 <strong>乘2取整, 顺序排列</strong> ：</p>\n<p>以 <code>0.625</code> 为例:</p>\n<p><mjx-container class=\"MathJax\" jax=\"SVG\" display=\"true\"><svg style=\"vertical-align: -0.566ex\" xmlns=\"http://www.w3.org/2000/svg\" width=\"46.512ex\" height=\"2.262ex\" role=\"img\" focusable=\"false\" viewBox=\"0 -750 20558.4 1000\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"scale(1,-1)\"><g data-mml-node=\"math\"><g data-mml-node=\"mn\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"36\" d=\"M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z\" transform=\"translate(778,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(1278,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(1778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(2500.2,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(3500.4,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(4278.2,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(5334,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(7112,0)\"></g><g data-mml-node=\"mo\" transform=\"translate(7112,0)\"><path data-c=\"28\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(7501,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\" transform=\"translate(778,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(1278,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(9501.2,0)\"><path data-c=\"2212\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(10501.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11001.4,0)\"><path data-c=\"29\" d=\"M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(11612.7,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(12612.9,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(13390.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(14446.4,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mspace\" transform=\"translate(15724.4,0)\"></g><g data-mml-node=\"mn\" transform=\"translate(15724.4,0)\"><path data-c=\"30\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path><path data-c=\"2E\" d=\"M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z\" transform=\"translate(500,0)\"></path><path data-c=\"35\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(778,0)\"></path></g><g data-mml-node=\"mo\" transform=\"translate(17224.7,0)\"><path data-c=\"D7\" d=\"M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(18224.9,0)\"><path data-c=\"32\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g data-mml-node=\"mo\" transform=\"translate(19002.7,0)\"><path data-c=\"3D\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g data-mml-node=\"mn\" transform=\"translate(20058.4,0)\"><path data-c=\"31\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path></g></g></g></svg></mjx-container></p>\n<p>因此, 十进制 <code>0.625</code> 的二进制表示为: <code>0.101</code> 。</p>\n<hr>\n<h1 id=\"为何位运算\"><a href=\"#为何位运算\" class=\"headerlink\" title=\"为何位运算\"></a>为何位运算</h1><p>尽管位运算在使用时存在表义不明的问题, 但只要加以适当注释, 就能解决这个问题。并且位运算基于数值的底层表示进行的, 速度快且效率高, 因而这里的一个最佳实践是:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>尽可能的使用位运算, 并加以适当的注释。</p></blockquote>\n<hr>\n<h1 id=\"位运算中的特殊值-NaN-和-Infinity\"><a href=\"#位运算中的特殊值-NaN-和-Infinity\" class=\"headerlink\" title=\"位运算中的特殊值 NaN 和 Infinity\"></a>位运算中的特殊值 <code>NaN</code> 和 <code>Infinity</code></h1><hr>\n<h1 id=\"按位非\"><a href=\"#按位非\" class=\"headerlink\" title=\"按位非 ( ~ )\"></a>按位非 ( <code>~</code> )</h1><p>按位非 ( <code>~</code> )用波浪符表示, 其返回数值的<strong>一补数 (反码)</strong>: 将二进制表示上每一位 <code>1</code> 变成 <code>0</code> , 每一位 <code>0</code> 变成 <code>1</code> (<strong>按位取反</strong>)。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">// 对一个整数按位与, 相当于取相反数后再减去 1\nconsole.log(~1); // -2\nconsole.log(~(-1)); // 0\n\n// 对一个正数两次按位与, 向下取整, 等价于 Math.floor()\n// 对一个负数两次按位与, 向上取整, 等价于 Math.ceil()\nconsole.log(~~1.2); // 1\nconsole.log(Math.floor(1.2)); // 1\nconsole.log(~~(-1.2)); // -1\nconsole.log(Math.ceil(-1.2)); // -1\n\n// Mth.round() 返回数值的四舍五入 (最接近的整数)\nconsole.log(Math.round(1.2)); // 1\nconsole.log(Math.round(1.8)); // 2\nconsole.log(Math.round(-1.2)); // -1\nconsole.log(Math.round(-1.8)); // -2</code></pre>\n\n<hr>\n<h2 id=\"a-amp-1\"><a href=\"#a-amp-1\" class=\"headerlink\" title=\"a & (~1)\"></a><code>a &amp; (~1)</code></h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">// a &amp; (~1)\n// 将 a 的整数部分取出, 并将最后一位变成 0\n// 如果 a 的第 0 位是 1, 则 a &amp; (~1) 等价于 a - 1\nconsole.log(3 &amp; (~1)); // 2 (11 -&gt; 10)\nconsole.log(5 &amp; (~1)); // 4 (101 -&gt; 100)\nconsole.log(7 &amp; (~1)); // 6 (111 -&gt; 110)\n// 如果 a 的第 0 位是 0, 则 a &amp; (~1) 等价于 a\nconsole.log(8 &amp; (~1)); // 8 (1000 -&gt; 1000)\n\n// a 为小数且为正时, a &amp; (~1) 等价于 Math.floor(a) &amp; (~1)\nconsole.log(8.2 &amp; (~1)); // 8\nconsole.log(Math.floor(8.2) &amp; (~1)); // 8\nconsole.log(8.8 &amp; (~1)); // 8\nconsole.log(Math.floor(8.8) &amp; (~1)); // 8\n// a 为小数且为负时, a &amp; (~1) 等价于 Math.ceil(a) &amp; (~1)\nconsole.log(-8.2 &amp; (~1)); // -8\nconsole.log(Math.ceil(-8.2) &amp; (~1)); // -8\nconsole.log(-8.8 &amp; (~1)); // -8\nconsole.log(Math.ceil(-8.8) &amp; (~1)); // -8</code></pre>\n\n<hr>\n<h2 id=\"a-1-a-的相反数\"><a href=\"#a-1-a-的相反数\" class=\"headerlink\" title=\"~ a+ 1 (a 的相反数)\"></a><code>~ a+ 1</code> (<code>a</code> 的相反数)</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">console.log(~1 + 1); // -1\nconsole.log(~1.2 + 1); // -1\nconsole.log(~1.8 + 1); // -1\nconsole.log(~(-1) + 1); // 1\nconsole.log(~(-1.2) + 1); // 1\nconsole.log(~(-1.8) + 1); // 1</code></pre>\n\n<hr>\n<h1 id=\"按位与-amp\"><a href=\"#按位与-amp\" class=\"headerlink\" title=\"按位与 ( & )\"></a>按位与 ( <code>&amp;</code> )</h1><hr>\n<h2 id=\"a-amp-0-0\"><a href=\"#a-amp-0-0\" class=\"headerlink\" title=\"a & 0 ===0\"></a><code>a &amp; 0 ===0</code></h2><p>任何数同 <code>0</code> 按位与都等于 <code>0</code> 。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">console.log(1 &amp; 0); // 0\nconsole.log(2 &amp; 0); // 0</code></pre>\n\n<hr>\n<h2 id=\"a-amp-1-结果为-0-或-1\"><a href=\"#a-amp-1-结果为-0-或-1\" class=\"headerlink\" title=\"a & 1 (结果为 0 或 1)\"></a><code>a &amp; 1</code> (结果为 <code>0</code> 或 <code>1</code>)</h2><p>由于 <code>1</code> 的二进制表示中第 <code>0</code> 位为 <code>1</code> , 其余位均为 <code>0</code> , 则任何一个数与 <code>1</code> 按位与, 其结果第 <code>0</code> 位取决于该数的第 <code>0</code> 位是否为 <code>1</code> , 结果的其余位则均为 <code>0</code> 。因而任何一个数同 <code>1</code> 按位与的结果只可能是 <code>0</code> 或 <code>1</code> , 也可以借助这一特性判断一个数的第 <code>0</code> 位是否为 <code>1</code> 。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">console.log(0 &amp; 1); // 0 (0 -&gt; 0)\nconsole.log(1 &amp; 1); // 1 (1 -&gt; 1)\nconsole.log(2 &amp; 1); // 0 (10 -&gt; 00)\nconsole.log(3 &amp; 1); // 1 (11 -&gt; 01)\nconsole.log(4 &amp; 1); // 0 (100 -&gt; 000)</code></pre>\n\n<p>更进一步, 如果一个数同 <code>1</code> 按位与的结果是 <code>0</code> , 则将该数左移一位; 如果该数同 <code>1</code> 按位与的结果是 <code>1</code> , 则 将该数左移一位同时计数器加 <code>1</code>; 重复以上操作直到该数变成 <code>0</code> , 便可统计出该数二进制中 <code>1</code> 的个数。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function hammingWeight(number) {\n    let count = 0;\n    while (number) {\n        number &amp; 1 === 1 ? (count += 1, number = number &gt;&gt; 1) : (number = number &gt;&gt; 1)\n    }\n    return count;\n}\nconsole.log(hammingWeight(11)); // 3\nconsole.log(hammingWeight(128)); // 1\nconsole.log(hammingWeight(11111111)); // 12\n\n// 这里存在一个待解决的 bug: 无法运算(陷入无限循环)\n// 4294967293 &amp; 1 -&gt; 1, 4294967293 &gt;&gt; 1 -&gt; -2\n// -2 &amp; 1 -&gt; 0, -2 &gt;&gt; 1 -&gt; -1\n// -1 &amp; 1 -&gt; 1, -1 &gt;&gt; 1 -&gt; -1\n// -1 &amp; 1 -&gt; 1, -1 &gt;&gt; 1 -&gt; -1\n// ...\n// console.log(hammingWeight(4294967293));\n// 其原因为: 对一个很大的数进行左移操作可能出现负值(4294967293 &gt;&gt; 1 -&gt; -2), 从而导致无限循环</code></pre>\n\n<hr>\n<h2 id=\"a-amp-a-1\"><a href=\"#a-amp-a-1\" class=\"headerlink\" title=\"a & (a - 1)\"></a><code>a &amp; (a - 1)</code></h2><p>将任意一个数同其减去1之后的数按位与, 结果等价于<br>将原来的数的二进制表示中最后一个 <code>1</code> 变成 <code>0</code> 。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">// 以 27(11011) 为例\nconsole.log(27 &amp; (27 - 1)); // 26 (11011 -&gt; 11010)\nconsole.log(26 &amp; (26 - 1)); // 24 (11010 -&gt; 11000)\nconsole.log(24 &amp; (24 - 1)); // 16 (11000 -&gt; 10000)\nconsole.log(16 &amp; (16 - 1)); // 0 (10000 -&gt; 00000)</code></pre>\n\n<p>若对一个数不断重复上述操作直到该数变为 <code>0</code> , 并使用计数器便可得到该数的二进制表示中 <code>1</code> 的个数。</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function hammingWeight(number) {\n    let count = 0;\n    while (number) {\n        number = number &amp; (number - 1);\n        count++;\n    }\n    return count;\n}\nconsole.log(hammingWeight(27)); // 4 (11011 -&gt; 11010 -&gt; 11000 -&gt; 10000 -&gt; 00000)</code></pre>\n\n<p>Read Also:</p>\n<p><a href=\"https://www.cnblogs.com/grenet/archive/2011/06/10/2077228.html\">快速计算一个正二进制数中包含多少个1</a></p>\n<p>另外, 还可判断一个数是否为 <code>2</code> 的幂:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">// 判断一个数是否为 2 的幂\n// 若是, 返回一个数组, 第一个元素 true 表示是, 第二个元素表示幂次\n// 若不是, 返回一个数组, 第一个元素 false 表示否, 第二个元素固定 -1 表示该数不是 2 的幂\nfunction powerOfTwo(number) {\n    return (number &amp; (number - 1)) === 0 ? [true, number.toString(2).length - 1] : [false, -1];\n}\nconsole.log(powerOfTwo(1)); // [true, 0]\nconsole.log(powerOfTwo(4)); // [true, 2] 2 * *2 =4\nconsole.log(powerOfTwo(1000)); // [false, -1]\nconsole.log(powerOfTwo(1024)); // [true, 10] 2 ** 10 = 1024</code></pre>\n\n<p>Read Also:</p>\n<p><a href=\"https://www.cnblogs.com/grenet/archive/2011/03/04/1970541.html\">判断是否为 2 的 N 次方</a></p>\n<hr>\n<h2 id=\"a-amp-a-获取-a-的最大的2整次幂约数\"><a href=\"#a-amp-a-获取-a-的最大的2整次幂约数\" class=\"headerlink\" title=\"a & (-a) (获取 a 的最大的2整次幂约数)\"></a><code>a &amp; (-a)</code> (获取 a 的最大的2整次幂约数)</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">console.log(12 &amp; -12); // 4 (2**2)\nconsole.log(16 &amp; -16); // 16 (2**4)\nconsole.log(108 &amp; -108); // 4 (2**2)</code></pre>\n\n<hr>\n<h3 id=\"最大公约-因-数和最小公倍数\"><a href=\"#最大公约-因-数和最小公倍数\" class=\"headerlink\" title=\"最大公约 (因) 数和最小公倍数\"></a>最大公约 (因) 数和最小公倍数</h3><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">// greatest common divisor\n// 递归求两数的最大公约数 gcm\nfunction gcd(a, b) {\n    if (b === 0) return a;\n    return gcd(b, a % b);\n}\nconsole.log(gcd(12, 8)); // 4\n// gcd(0, 8) = gcd(8, 0) = 8\nconsole.log(gcd(0, 8)); // 8\nconsole.log(gcd(8, 0)); // 8\n// least common multiple\n// 最小公倍数为两数之积除以两数最大公约数 lcm\nfunction lcm(a, b) {\n    return a * b / gcd(a, b);\n}\nconsole.log(lcm(12, 8)); // 24</code></pre>\n\n<p>这里, 对于 <code>gcd</code> 和 <code>lcm</code> 的定义, 可以参考 <a href=\"https://en.wikipedia.org/wiki/Euclidean_algorithm\">wiki</a> 。</p>\n<p>关于 gcd(0, 8) = gcd(8, 0) = 8, 可参考 <a href=\"https://math.stackexchange.com/questions/3053333/show-that-gcda-0-exists-and-equals-a-for-all-a-in-mathbb-z\">这里</a></p>\n<hr>\n<h1 id=\"按位或\"><a href=\"#按位或\" class=\"headerlink\" title=\"按位或 ( | )\"></a>按位或 ( <code>|</code> )</h1><h1 id=\"按位异或\"><a href=\"#按位异或\" class=\"headerlink\" title=\"按位异或 ( ^ )\"></a>按位异或 ( <code>^</code> )</h1><h1 id=\"左移-lt-lt\"><a href=\"#左移-lt-lt\" class=\"headerlink\" title=\"左移 ( << )\"></a>左移 ( <code>&lt;&lt;</code> )</h1><h1 id=\"有符号右移-gt-gt\"><a href=\"#有符号右移-gt-gt\" class=\"headerlink\" title=\"有符号右移 ( >> )\"></a>有符号右移 ( <code>&gt;&gt;</code> )</h1><h1 id=\"无符号右移-gt-gt-gt\"><a href=\"#无符号右移-gt-gt-gt\" class=\"headerlink\" title=\"无符号右移 ( >>> )\"></a>无符号右移 ( <code>&gt;&gt;&gt;</code> )</h1><h1 id=\"为何左移不区分为有符号左移和无符号左移\"><a href=\"#为何左移不区分为有符号左移和无符号左移\" class=\"headerlink\" title=\"为何左移不区分为有符号左移和无符号左移?\"></a>为何左移不区分为有符号左移和无符号左移?</h1>","feature":true,"text":" 二进制回顾十进制整数转换为二进制十进制整数转换为二进制可采用 除2取余, 逆序排列 (短除法) ： 十进制小数转换为二进制十进制整数转换为二进制可采用 乘2取整, 顺序排列 ： 以 0.625 为例: 因此, 十进制 0.625 的二进制表示为: 0.101 。 为何位运算尽管...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"位运算","slug":"位运算","count":1,"path":"api/tags/位运算.json"},{"name":"深入解析","slug":"深入解析","count":1,"path":"api/tags/深入解析.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">二进制回顾</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B4%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">十进制整数转换为二进制</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%81%E8%BF%9B%E5%88%B6%E5%B0%8F%E6%95%B0%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E8%BF%9B%E5%88%B6\"><span class=\"toc-text\">十进制小数转换为二进制</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BD%95%E4%BD%8D%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">为何位运算</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E4%B8%AD%E7%9A%84%E7%89%B9%E6%AE%8A%E5%80%BC-NaN-%E5%92%8C-Infinity\"><span class=\"toc-text\">位运算中的特殊值 NaN 和 Infinity</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%89%E4%BD%8D%E9%9D%9E\"><span class=\"toc-text\">按位非 ( ~ )</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#a-amp-1\"><span class=\"toc-text\">a &amp; (~1)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#a-1-a-%E7%9A%84%E7%9B%B8%E5%8F%8D%E6%95%B0\"><span class=\"toc-text\">~ a+ 1 (a 的相反数)</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%89%E4%BD%8D%E4%B8%8E-amp\"><span class=\"toc-text\">按位与 ( &amp; )</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#a-amp-0-0\"><span class=\"toc-text\">a &amp; 0 &#x3D;&#x3D;&#x3D;0</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#a-amp-1-%E7%BB%93%E6%9E%9C%E4%B8%BA-0-%E6%88%96-1\"><span class=\"toc-text\">a &amp; 1 (结果为 0 或 1)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#a-amp-a-1\"><span class=\"toc-text\">a &amp; (a - 1)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#a-amp-a-%E8%8E%B7%E5%8F%96-a-%E7%9A%84%E6%9C%80%E5%A4%A7%E7%9A%842%E6%95%B4%E6%AC%A1%E5%B9%82%E7%BA%A6%E6%95%B0\"><span class=\"toc-text\">a &amp; (-a) (获取 a 的最大的2整次幂约数)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6-%E5%9B%A0-%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0\"><span class=\"toc-text\">最大公约 (因) 数和最小公倍数</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%89%E4%BD%8D%E6%88%96\"><span class=\"toc-text\">按位或 ( | )</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8C%89%E4%BD%8D%E5%BC%82%E6%88%96\"><span class=\"toc-text\">按位异或 ( ^ )</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%B7%A6%E7%A7%BB-lt-lt\"><span class=\"toc-text\">左移 ( &lt;&lt; )</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%9C%89%E7%AC%A6%E5%8F%B7%E5%8F%B3%E7%A7%BB-gt-gt\"><span class=\"toc-text\">有符号右移 ( &gt;&gt; )</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%8F%B3%E7%A7%BB-gt-gt-gt\"><span class=\"toc-text\">无符号右移 ( &gt;&gt;&gt; )</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BD%95%E5%B7%A6%E7%A7%BB%E4%B8%8D%E5%8C%BA%E5%88%86%E4%B8%BA%E6%9C%89%E7%AC%A6%E5%8F%B7%E5%B7%A6%E7%A7%BB%E5%92%8C%E6%97%A0%E7%AC%A6%E5%8F%B7%E5%B7%A6%E7%A7%BB\"><span class=\"toc-text\">为何左移不区分为有符号左移和无符号左移?</span></a></li></ol>","author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"文字滚动的实现","uid":"0978c8b88ba6e3aab02deffaa34e6058","slug":"文字滚动的实现","date":"2022-04-14T17:28:14.000Z","updated":"2022-04-17T11:00:03.820Z","comments":true,"path":"api/articles/文字滚动的实现.json","keywords":null,"cover":null,"text":"文字横向滚动HTML 实现HTML 提供了 &lt;marquee&gt; 元素用以插入一段可滚动的文字。 注意 &lt;marquee&gt; 元素已过时,请不要再使用它。 MDN- Can I use-HTML element: marquee &lt;!-- 默认效果 --...","link":"","photos":[],"count_time":{"symbolsCount":593,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":6,"path":"api/tags/JavaScript.json"},{"name":"文字滚动","slug":"文字滚动","count":1,"path":"api/tags/文字滚动.json"},{"name":"实现","slug":"实现","count":1,"path":"api/tags/实现.json"},{"name":"HTML","slug":"HTML","count":1,"path":"api/tags/HTML.json"},{"name":"CSS","slug":"CSS","count":1,"path":"api/tags/CSS.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"精确覆盖问题","uid":"1001f33dad10400ea5f367d8a08e122a","slug":"精确覆盖问题","date":"2022-04-12T09:10:46.000Z","updated":"2022-04-12T09:12:34.442Z","comments":true,"path":"api/articles/精确覆盖问题.json","keywords":null,"cover":null,"text":" 精确覆盖问题Exact cover wiki Dancing Links OI Wiki A Sudoku Solver in Java implementing Knuth’s Dancing Links Algorithm 数独规则回顾 每个格子只能填入 1 ~ 9 中的一...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}