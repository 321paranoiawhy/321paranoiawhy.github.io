{"title":"Web-Components-Part-1","uid":"38487480f04b1d9bb0fc82b79f84cdb0","slug":"Web-Components-Part-1","date":"2022-08-19T08:41:52.000Z","updated":"2022-08-20T12:56:13.692Z","comments":true,"path":"api/articles/Web-Components-Part-1.json","keywords":null,"cover":null,"content":"<hr>\n<h1 id=\"生命周期函数\"><a href=\"#生命周期函数\" class=\"headerlink\" title=\"生命周期函数\"></a>生命周期函数</h1><p><a href=\"https://levelup.gitconnected.com/creating-web-components-lifecycle-callbacks-5b6ffa48a8d5\">Creating Web Components — Lifecycle Callbacks - Medium</a></p>\n<hr>\n<h2 id=\"connectedCallback\"><a href=\"#connectedCallback\" class=\"headerlink\" title=\"connectedCallback()\"></a><code>connectedCallback()</code></h2><p>当 <code>web components</code> 首次被挂载到 <code>DOM</code> 上, <code>connectedCallback()</code> 回调函数将被执行。</p>\n<hr>\n<h2 id=\"disconnectedCallback\"><a href=\"#disconnectedCallback\" class=\"headerlink\" title=\"disconnectedCallback()\"></a><code>disconnectedCallback()</code></h2><p>当 <code>web components</code> 从 <code>DOM</code> 中被移除时, <code>disconnectedCallback()</code> 回调函数将被执行。</p>\n<hr>\n<h2 id=\"adoptedCallback\"><a href=\"#adoptedCallback\" class=\"headerlink\" title=\"adoptedCallback()\"></a><code>adoptedCallback()</code></h2><p>当 <code>document.adoptNode</code> , <code>disconnectedCallback()</code> 回调函数将被执行。</p>\n<hr>\n<h2 id=\"attributeChangedCallback-name-oldValue-newValue\"><a href=\"#attributeChangedCallback-name-oldValue-newValue\" class=\"headerlink\" title=\"attributeChangedCallback(name, oldValue, newValue)\"></a><code>attributeChangedCallback(name, oldValue, newValue)</code></h2><pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;custom-element\n  foo&#x3D;&quot;foo&quot;\n  bar&#x3D;&quot;bar&quot;\n  baz&#x3D;&quot;baz&quot;&gt;\n&lt;&#x2F;custom-element&gt;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">class CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    const shadow &#x3D; this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n  &#125;\n\n  static get observedAttributes() &#123;\n    return [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;];\n  &#125;\n\n  attributeChangedCallback(name, oldValue, newValue) &#123;\n    console.log(&#96;$&#123;name&#125;&#39;s value has been changed from $&#123;oldValue&#125; to $&#123;newValue&#125;&#96;.);\n  &#125;\n&#125;\n\ncustomElements.define(&#39;custom-element&#39;, CustomElement);</code></pre>\n\n<p>由于 <code>oldValue</code> 初始值为 <code>null</code>, 故上述打印结果为:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>foo’s value has been changed from null to foo.</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>bar’s value has been changed from null to bar.</p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>baz’s value has been changed from null to baz.</p></blockquote>\n<hr>\n<h2 id=\"生命周期函数执行顺序\"><a href=\"#生命周期函数执行顺序\" class=\"headerlink\" title=\"生命周期函数执行顺序\"></a>生命周期函数执行顺序</h2><p><code>constructor</code> -&gt; <code>attributeChangedCallback</code> -&gt; <code>connectedCallback</code>.</p>\n<ul>\n<li><a href=\"https://javascript.info/custom-elements#rendering-order\">Rendering order</a></li>\n</ul>\n<hr>\n<h1 id=\"JavaScript-获取-web-components-属性和方法\"><a href=\"#JavaScript-获取-web-components-属性和方法\" class=\"headerlink\" title=\"JavaScript 获取 web components 属性和方法\"></a><code>JavaScript</code> 获取 <code>web components</code> 属性和方法</h1><h2 id=\"获取-observedAttributes\"><a href=\"#获取-observedAttributes\" class=\"headerlink\" title=\"获取 observedAttributes\"></a>获取 <code>observedAttributes</code></h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let dom &#x3D; document.querySelector(&#39;custom-element&#39;);\n&#x2F;&#x2F; 打印首个 custom element 的 observedAttributes\nconsole.log(dom.constructor.observedAttributes);</code></pre>\n\n<p><a href=\"https://stackoverflow.com/questions/53408351/how-to-access-observedattributes-on-web-components\">how-to-access-observedAttributes-on-web-components</a></p>\n<hr>\n<h2 id=\"获取-shadowRoot\"><a href=\"#获取-shadowRoot\" class=\"headerlink\" title=\"获取 shadowRoot\"></a>获取 <code>shadowRoot</code></h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let dom &#x3D; document.querySelector(&#39;custom-element&#39;);\n&#x2F;&#x2F; 打印首个 custom element 的 observedAttributes\nconsole.log(dom.shadowRoot);\nconsole.dir(dom.shadowRoot); &#x2F;&#x2F; #document-fragment</code></pre>\n\n<hr>\n<h2 id=\"获取内部-DOM\"><a href=\"#获取内部-DOM\" class=\"headerlink\" title=\"获取内部 DOM\"></a>获取内部 <code>DOM</code></h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let dom &#x3D; document.querySelector(&#39;custom-element&#39;);\n&#x2F;&#x2F; 获取到 shadowRoot 后, 可使用常规 DOM 获取方法来获取内部 DOM\nconsole.log(dom.shadowRoot.querySelector(&#39;div&#39;));</code></pre>\n\n<hr>\n<h2 id=\"获取所有-JavaScript-Properties\"><a href=\"#获取所有-JavaScript-Properties\" class=\"headerlink\" title=\"获取所有 JavaScript Properties\"></a>获取所有 <code>JavaScript Properties</code></h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let dom &#x3D; document.querySelector(&#39;custom-element&#39;);\n&#x2F;&#x2F; for...in 遍历\nfor (let key in dom) &#123;\n    console.log([key, dom[key]]);\n&#125;</code></pre>\n\n<p>如果使用 <code>Object.keys(dom)</code> 、<code>Reflect.ownKeys(dom)</code>, 则无法获取到 <code>DOM</code> 的全部键组成的数组。其中 <code>Reflect.ownKeys(dom)</code> 与 <code>Object.getOwnPropertyNames(dom).concat(Object.getOwnPropertySymbols(dom))</code> 返回的目标对象自身属性键数组是一致的。</p>\n<p>另外, 选中元素后在浏览器控制台 <code>Styles</code> 右侧找到 <code>Properties</code> 一列, 可以看到当前 <code>DOM</code> 的所有 <code>Properties</code>。</p>\n<hr>\n<h1 id=\"slot-元素\"><a href=\"#slot-元素\" class=\"headerlink\" title=\"slot 元素\"></a><code>slot</code> 元素</h1><p>这里, <code>slot</code> 元素指 <code>shadow DOM</code> 中 <code>slot</code> 元素, 即 <code>class</code> 内定义的 <code>slot</code> 元素, 它可以有 <code>name</code> 属性。</p>\n<p><code>HTML</code> 元素指在 <code>web components</code> 内部(也称为 <code>light DOM</code> ) 常规、普通的 <code>HTML</code> 元素, 它可以有 <code>slot</code> 属性。</p>\n<p><code>slot</code> 元素的 <code>display</code> 属性值为 <code>contents</code>, 这是其特殊之处。详见如下链接:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display-box\">display-box</a></li>\n<li><a href=\"https://drafts.csswg.org/css-display/#unbox\">Appendix B: Effects of display: contents on Unusual Elements</a></li>\n<li><a href=\"https://bitsofco.de/how-display-contents-works/\">How display: contents; Works</a></li>\n<li><a href=\"https://www.w3cplus.com/css/display-contents-is-coming.html\">CSS的display:contents</a></li>\n<li><a href=\"https://adrianroselli.com/2018/05/display-contents-is-not-a-css-reset.html\">Display: Contents Is Not a CSS Reset</a></li>\n<li><a href=\"https://juejin.cn/post/6844903973678219277#heading-0\">巧用 display: contents 增强页面语义</a></li>\n<li><a href=\"https://hidde.blog/more-accessible-markup-with-display-contents/\">More accessible markup with display: contents</a></li>\n</ul>\n<hr>\n<h2 id=\"一对一匹配\"><a href=\"#一对一匹配\" class=\"headerlink\" title=\"一对一匹配\"></a>一对一匹配</h2><p>当 <code>slot</code> 元素 的 <code>name</code> 属性值与 <code>HTML</code> 元素的 <code>slot</code> 属性值一致时, 二者匹配成功, 后者将替换前者并显示在浏览器中, 在浏览器控制台中可展开组件查看详情。</p>\n<hr>\n<h2 id=\"匹配不成功\"><a href=\"#匹配不成功\" class=\"headerlink\" title=\"匹配不成功\"></a>匹配不成功</h2><p>如果匹配不成功, 则 <code>slot</code> 元素按其在 <code>shadow DOM</code> 中的默认内容正常显示。</p>\n<hr>\n<h2 id=\"name-属性值唯一\"><a href=\"#name-属性值唯一\" class=\"headerlink\" title=\"name 属性值唯一\"></a><code>name</code> 属性值唯一</h2><p><code>slot</code> 元素的 <code>name</code> 属性值是<code>唯一</code>的。如果有多个 <code>slot</code> 元素的 <code>name</code> 属性值相同, 则只有最先出现在 <code>shadow DOM</code> 中的 <code>slot</code> 元素才会被相匹配的 <code>HTML</code> 元素替代, 其余 <code>slot</code> 则按其在 <code>shadow DOM</code> 中的默认内容正常显示。</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;custom-element&gt;\n  &lt;p slot&#x3D;&#39;slot&#39;&gt;New Paragraph 1 (replace &#39;Paragraph 1&#39;)&lt;&#x2F;p&gt;\n&lt;&#x2F;custom-element&gt;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">class CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;slot name&#x3D;&#39;slot&#39;&gt;Paragraph 1&lt;&#x2F;slot&gt;\n    &lt;slot name&#x3D;&#39;slot&#39;&gt;Paragraph 2&lt;&#x2F;slot&gt;\n    &#96;\n  &#125;\n&#125;\ncustomElements.define(&#39;custom-element&#39;, CustomElement);</code></pre>\n\n<ul>\n<li><a href=\"https://codepen.io/paraoiawhy/pen/vYRbjYm\">Codepen Live Demo</a></li>\n</ul>\n<hr>\n<h2 id=\"slot-属性值不唯一\"><a href=\"#slot-属性值不唯一\" class=\"headerlink\" title=\"slot 属性值不唯一\"></a><code>slot</code> 属性值不唯一</h2><p><code>HTML</code> 元素的 <code>slot</code> 属性值是<code>不唯一</code>的。如果外部 <code>light DOM</code> 中多个 <code>HTML</code> 元素的 <code>slot</code> 属性值相同, 则会重复替代与其相匹配的 <code>shadow DOM</code> 中 <code>slot</code>元素。</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;custom-element&gt;\n  &lt;p slot&#x3D;&#39;slot1&#39;&gt;New Paragraph 1 (replace &#39;Paragraph 1&#39;)&lt;&#x2F;p&gt;\n  &lt;p slot&#x3D;&#39;slot1&#39;&gt;New Paragraph 2 (replace &#39;Paragraph 1&#39;)&lt;&#x2F;p&gt;\n&lt;&#x2F;custom-element&gt;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">class CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;slot name&#x3D;&#39;slot1&#39;&gt;Paragraph 1&lt;&#x2F;slot&gt;\n    &lt;slot name&#x3D;&#39;slot2&#39;&gt;Paragraph 2&lt;&#x2F;slot&gt;\n    &#96;\n  &#125;\n&#125;\ncustomElements.define(&#39;custom-element&#39;, CustomElement);</code></pre>\n\n<ul>\n<li><a href=\"https://codepen.io/paraoiawhy/pen/xxWMjGw\">Codepen Live Demo</a></li>\n</ul>\n<hr>\n<h2 id=\"默认插槽-第一个不具名插槽\"><a href=\"#默认插槽-第一个不具名插槽\" class=\"headerlink\" title=\"默认插槽: 第一个不具名插槽\"></a>默认插槽: 第一个不具名插槽</h2><p>如果 <code>slot</code> 元素没有 <code>name</code> 属性, 则 所有没有 <code>slot</code>属性的 <code>HTML</code> 元素都将被一并归入该 <code>slot</code> 元素。</p>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;custom-element&gt;\n  &lt;p &gt;Paragraph with no slot attribute&lt;&#x2F;p&gt;\n  &lt;p &gt;Paragraph with no slot attribute&lt;&#x2F;p&gt;\n  &lt;p &gt;Paragraph with no slot attribute&lt;&#x2F;p&gt;\n  &lt;p slot&#x3D;&#39;slot&#39;&gt;Paragraph with slot attribute&lt;&#x2F;p&gt;\n&lt;&#x2F;custom-element&gt;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">class CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;slot&gt;&lt;&#x2F;slot&gt;\n    &lt;slot name&#x3D;&#39;slot&#39;&gt;&lt;&#x2F;slot&gt;\n    &#96;\n  &#125;\n&#125;\ncustomElements.define(&#39;custom-element&#39;, CustomElement);</code></pre>\n\n<ul>\n<li><a href=\"https://zh.javascript.info/slots-composition#mo-ren-cha-cao-di-yi-ge-bu-ju-ming-de-cha-cao\">默认插槽: 第一个不具名的插槽</a></li>\n<li><a href=\"https://codepen.io/paraoiawhy/pen/OJvdZXZ\">Codepen Live Demo</a></li>\n</ul>\n<hr>\n<h2 id=\"有slot-属性-的HTML-元素出现位置\"><a href=\"#有slot-属性-的HTML-元素出现位置\" class=\"headerlink\" title=\"有slot 属性 的HTML 元素出现位置\"></a>有<code>slot</code> 属性 的<code>HTML</code> 元素出现位置</h2><ol>\n<li>如果有<code>slot</code> 属性 的<code>HTML</code> 元素出现在 <code>web components</code> 外部, 则不会替换 <code>slot</code>元素, 即使二者是匹配的。</li>\n</ol>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;p slot&#x3D;&#39;slot&#39;&gt;Paragraph outside&lt;&#x2F;p&gt;\n&lt;custom-element&gt;\n&lt;&#x2F;custom-element&gt;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">class CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;slot name&#x3D;&#39;slot&#39;&gt;Paragraph Inside&lt;&#x2F;slot&gt;\n    &#96;\n  &#125;\n&#125;\ncustomElements.define(&#39;custom-element&#39;, CustomElement);</code></pre>\n\n<ul>\n<li><a href=\"https://codepen.io/paraoiawhy/pen/YzaBLEE\">Codepen Live Demo</a></li>\n</ul>\n<ol start=\"2\">\n<li>如果有<code>slot</code> 属性 的<code>HTML</code> 元素出现在 <code>web components</code> 内部, 却不是 <code>web components</code> 的直接子元素(如在嵌套元素内), 则不会有替换行为。</li>\n</ol>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;custom-element&gt;\n  &lt;div&gt;\n    &lt;p slot&#x3D;&#39;slot&#39;&gt;New Paragraph (won&#39;t replace &#39;Paragraph Inside&#39;)&lt;&#x2F;p&gt;\n  &lt;&#x2F;div&gt;\n&lt;&#x2F;custom-element&gt;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">class CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;slot name&#x3D;&#39;slot&#39;&gt;Paragraph Inside&lt;&#x2F;slot&gt;\n    &#96;\n  &#125;\n&#125;\ncustomElements.define(&#39;custom-element&#39;, CustomElement);</code></pre>\n\n<ul>\n<li><a href=\"https://codepen.io/paraoiawhy/pen/rNdPvJO\">Codepen Live Demo</a></li>\n</ul>\n<ol start=\"3\">\n<li>有<code>slot</code> 属性 的<code>HTML</code> 元素出现在 <code>web components</code> 内部, 且必须是其直接子元素并与 <code>slot</code> 元素匹配, 才会有替换行为。</li>\n</ol>\n<pre class=\"line-numbers language-HTML\" data-language=\"HTML\"><code class=\"language-HTML\">&lt;custom-element&gt;\n  &lt;p slot&#x3D;&#39;slot&#39;&gt;New Paragraph (replace &#39;Paragraph Inside&#39;)&lt;&#x2F;p&gt;\n&lt;&#x2F;custom-element&gt;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">class CustomElement extends HTMLElement &#123;\n  constructor() &#123;\n    super();\n    this.attachShadow(&#123;\n      mode: &#39;open&#39;\n    &#125;);\n    this.shadowRoot.innerHTML &#x3D; &#96;\n    &lt;slot name&#x3D;&#39;slot&#39;&gt;Paragraph Inside&lt;&#x2F;slot&gt;\n    &#96;\n  &#125;\n&#125;\ncustomElements.define(&#39;custom-element&#39;, CustomElement);</code></pre>\n\n<ul>\n<li><a href=\"https://codepen.io/paraoiawhy/pen/VwXgxyM\">Codepen Live Demo</a></li>\n</ul>\n<hr>\n","feature":true,"text":" 生命周期函数Creating Web Components — Lifecycle Callbacks - Medium connectedCallback()当 web components 首次被挂载到 DOM 上, connectedCallback() 回调函数将被执行...","link":"","photos":[],"count_time":{"symbolsCount":"7.3k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"Web Components","slug":"Web-Components","count":1,"path":"api/tags/Web-Components.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">生命周期函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#connectedCallback\"><span class=\"toc-text\">connectedCallback()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#disconnectedCallback\"><span class=\"toc-text\">disconnectedCallback()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#adoptedCallback\"><span class=\"toc-text\">adoptedCallback()</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#attributeChangedCallback-name-oldValue-newValue\"><span class=\"toc-text\">attributeChangedCallback(name, oldValue, newValue)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F\"><span class=\"toc-text\">生命周期函数执行顺序</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JavaScript-%E8%8E%B7%E5%8F%96-web-components-%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">JavaScript 获取 web components 属性和方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96-observedAttributes\"><span class=\"toc-text\">获取 observedAttributes</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96-shadowRoot\"><span class=\"toc-text\">获取 shadowRoot</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E5%86%85%E9%83%A8-DOM\"><span class=\"toc-text\">获取内部 DOM</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89-JavaScript-Properties\"><span class=\"toc-text\">获取所有 JavaScript Properties</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#slot-%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">slot 元素</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%AF%B9%E4%B8%80%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">一对一匹配</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8C%B9%E9%85%8D%E4%B8%8D%E6%88%90%E5%8A%9F\"><span class=\"toc-text\">匹配不成功</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#name-%E5%B1%9E%E6%80%A7%E5%80%BC%E5%94%AF%E4%B8%80\"><span class=\"toc-text\">name 属性值唯一</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#slot-%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%8D%E5%94%AF%E4%B8%80\"><span class=\"toc-text\">slot 属性值不唯一</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%BB%98%E8%AE%A4%E6%8F%92%E6%A7%BD-%E7%AC%AC%E4%B8%80%E4%B8%AA%E4%B8%8D%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD\"><span class=\"toc-text\">默认插槽: 第一个不具名插槽</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%89slot-%E5%B1%9E%E6%80%A7-%E7%9A%84HTML-%E5%85%83%E7%B4%A0%E5%87%BA%E7%8E%B0%E4%BD%8D%E7%BD%AE\"><span class=\"toc-text\">有slot 属性 的HTML 元素出现位置</span></a></li></ol></li></ol>","author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"设计灵感收集","uid":"3898482435b90639c29f215ec9492dde","slug":"设计灵感收集","date":"2022-08-19T08:45:33.000Z","updated":"2022-08-19T08:47:11.489Z","comments":true,"path":"api/articles/设计灵感收集.json","keywords":null,"cover":null,"text":"Medium 双击选中文本后弹出提示: 编辑和分享至推特 ","link":"","photos":[],"count_time":{"symbolsCount":30,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"设计","slug":"设计","count":1,"path":"api/tags/设计.json"},{"name":"灵感","slug":"灵感","count":1,"path":"api/tags/灵感.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"CSS-Variable","uid":"8949a0dd9071511c8b500f8362ade395","slug":"CSS-Variable","date":"2022-08-18T08:51:55.000Z","updated":"2022-08-18T13:42:12.696Z","comments":true,"path":"api/articles/CSS-Variable.json","keywords":null,"cover":null,"text":"定义和使用 CSS 变量CSS 变量可以全局定义, 即在 :root 伪类选择器中按如下定义: :root &#123; &#x2F;* 1. 必须以 -- 开头 *&#x2F; &#x2F;* 2. 区分大小写, 即 --main-color 和 --Main-Color 为完...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"CSS","slug":"CSS","count":6,"path":"api/tags/CSS.json"},{"name":"Variable","slug":"Variable","count":1,"path":"api/tags/Variable.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}