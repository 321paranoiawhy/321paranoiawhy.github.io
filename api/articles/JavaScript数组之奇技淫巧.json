{"title":"JavaScript数组之奇技淫巧","uid":"91d29442500deeb82a763ac9ac0b6005","slug":"JavaScript数组之奇技淫巧","date":"2022-04-11T11:22:17.000Z","updated":"2022-04-25T02:40:23.799Z","comments":true,"path":"api/articles/JavaScript数组之奇技淫巧.json","keywords":null,"cover":null,"content":"<hr>\n<h1 id=\"快速创建有规律数组\"><a href=\"#快速创建有规律数组\" class=\"headerlink\" title=\"快速创建有规律数组\"></a>快速创建有规律数组</h1><hr>\n<h2 id=\"元素为-0-99-的数组\"><a href=\"#元素为-0-99-的数组\" class=\"headerlink\" title=\"元素为 0 ~ 99 的数组\"></a>元素为 <code>0 ~ 99</code> 的数组</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; new Array(100) 创建一个长度为 100 的空数组 (new 关键字可省略)\n&#x2F;&#x2F; keys() 返回数组索引的一个迭代器\n&#x2F;&#x2F; Array.from() 将迭代器 (类数组对象, 任何可迭代对象) 转换为数组实例\nArray.from(new Array(100).keys()); &#x2F;&#x2F; 0 ~ 99</code></pre>\n\n<hr>\n<h2 id=\"元素为-1-100-的数组\"><a href=\"#元素为-1-100-的数组\" class=\"headerlink\" title=\"元素为 1 ~ 100 的数组\"></a>元素为 <code>1 ~ 100</code> 的数组</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; new Array(100) 创建一个长度为 100 的空数组 (new 关键字可省略)\n&#x2F;&#x2F; keys() 返回数组索引的一个迭代器\n&#x2F;&#x2F; Array.from() 将迭代器 (类数组对象, 任何可迭代对象) 转换为数组实例\n&#x2F;&#x2F; map() 对数组的每个元素执行指定的操作: 箭头函数\nArray.from(new Array(100).keys()).map(i &#x3D;&gt; i + 1); &#x2F;&#x2F; 1 ~ 100\n\n&#x2F;&#x2F; 在 Array.from() 中使用箭头函数\n&#x2F;&#x2F;\nArray.from(new Array(100), (item, index) &#x3D;&gt; index + 1); &#x2F;&#x2F; 1 ~ 100</code></pre>\n\n<hr>\n<h2 id=\"元素为指定区间-start-end-的数组\"><a href=\"#元素为指定区间-start-end-的数组\" class=\"headerlink\" title=\"元素为指定区间 [start, end] 的数组\"></a>元素为指定区间 <code>[start, end]</code> 的数组</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; slice() 方法\nlet start &#x3D; 3;\nlet end &#x3D; 10;\nArray.from(new Array(end + 1).keys()).slice(start); &#x2F;&#x2F; [3, 4, 5, 6, 7, 8, 9, 10]\n\n&#x2F;&#x2F; 更为通用的方法\nfunction range(start, end, step) &#123;\n    return Array.from(&#123; length: (end - start) &#x2F; step + 1 &#125;, (v, i) &#x3D;&gt; start + i * step);\n&#125;\nconsole.log(range(10, 100, 10)); &#x2F;&#x2F; [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\nconsole.log(range(0, 4, 1)); &#x2F;&#x2F; [0, 1, 2, 3, 4]\nconsole.log(range(1, 10, 2)); &#x2F;&#x2F; [1, 3, 5, 7, 9]\n\n&#x2F;&#x2F; 直接写成箭头函数\nconst arrowRange &#x3D; (start, end, step) &#x3D;&gt; Array.from(&#123; length: (end - start) &#x2F; step + 1 &#125;, (v, i) &#x3D;&gt; start + i * step);</code></pre>\n<h2 id=\"元素为字母表的数组\"><a href=\"#元素为字母表的数组\" class=\"headerlink\" title=\"元素为字母表的数组\"></a>元素为字母表的数组</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">const arrowRange &#x3D; (start, end, step) &#x3D;&gt; Array.from(&#123; length: (end - start) &#x2F; step + 1 &#125;, (v, i) &#x3D;&gt; start + i * step);\n\n&#x2F;&#x2F; 大写字母表 Alphabet 字符数组\nlet Alphabet &#x3D; arrowRange(&quot;A&quot;.charCodeAt(0), &quot;Z&quot;.charCodeAt(0), 1).map(i &#x3D;&gt; String.fromCharCode(i));\nconsole.log(Alphabet);\n&#x2F;&#x2F; [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;,&#39;G&#39;, &#39;H&#39;, &#39;I&#39;, &#39;J&#39;, &#39;K&#39;, &#39;L&#39;,&#39;M&#39;, &#39;N&#39;, &#39;O&#39;, &#39;P&#39;, &#39;Q&#39;, &#39;R&#39;,&#39;S&#39;, &#39;T&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;X&#39; &#39;Y&#39;, &#39;Z&#39;]\n\n&#x2F;&#x2F; 小写字母表 alphabet 字符数组\nlet alphabet &#x3D; arrowRange(&quot;a&quot;.charCodeAt(0), &quot;z&quot;.charCodeAt(0), 1).map(i &#x3D;&gt; String.fromCharCode(i));\nconsole.log(alphabet);\n&#x2F;&#x2F; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;,&#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;,&#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;,&#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39; &#39;y&#39;, &#39;z&#39;]\n\n&#x2F;&#x2F; number 为元素为 0~9 的字符数组\nlet number &#x3D; arrowRange(0, 9, 1).map(i &#x3D;&gt; i + &quot;&quot;);\nconsole.log(number);\n&#x2F;&#x2F; [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n&#x2F;&#x2F; 十六进制下字符数组 Digits (0~9, A~Z, 共10+26&#x3D;36个)\nlet Digits &#x3D; number.concat(Alphabet);\nconsole.log(Digits);\n&#x2F;&#x2F; [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;,&#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;,&#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;, &#39;I&#39;, &#39;J&#39;, &#39;K&#39;,&#39;L&#39;, &#39;M&#39;, &#39;N&#39;, &#39;O&#39;, &#39;P&#39;, &#39;Q&#39;, &#39;R&#39;,&#39;S&#39;, &#39;T&#39;, &#39;U&#39;, &#39;V&#39;, &#39;W&#39;, &#39;X&#39;, &#39;Y&#39;,&#39;Z&#39;]\n\n&#x2F;&#x2F; 十六进制下字符串 DigitsString (0~9, A~Z, 共10+26&#x3D;36个)\nlet DigitsString &#x3D; (number + &quot;&quot; + Alphabet).replace(&#x2F;,&#x2F;g, &quot;&quot;);\nconsole.log(DigitsString);\n&#x2F;&#x2F; &quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;\n\n&#x2F;&#x2F; 十六进制下字符数组 digits (0~9, a~z, 共10+26&#x3D;36个)\nlet digits &#x3D; number.concat(alphabet);\nconsole.log(digits);\n&#x2F;&#x2F; [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;,&#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;,&#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;,&#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;,&#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;,&#39;z&#39;]\n\n&#x2F;&#x2F; 十六进制下字符串 digitsString (0~9, a~z, 共10+26&#x3D;36个)\nlet digitsString &#x3D; (number + &quot;&quot; + alphabet).replace(&#x2F;,&#x2F;g, &quot;&quot;);\nconsole.log(digitsString);\n&#x2F;&#x2F; &quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</code></pre>\n\n<hr>\n<h2 id=\"数组去重\"><a href=\"#数组去重\" class=\"headerlink\" title=\"数组去重\"></a>数组去重</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function combine()&#123;\n    let arr &#x3D; [].concat.apply([], arguments);  &#x2F;&#x2F; 没有去重复的新数组\n    return Array.from(new Set(arr));\n&#125;\nconsole.log(combine([1, 2, 3], [4, 5, 6])); &#x2F;&#x2F; [1, 2, 3, 4, 5, 6]\nconsole.log(combine([2, 2, 2], [2, 3, 3])); &#x2F;&#x2F; [2, 3]</code></pre>\n<h2 id=\"打平数组\"><a href=\"#打平数组\" class=\"headerlink\" title=\"打平数组\"></a>打平数组</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\"></code></pre>\n\n\n<h2 id=\"两个长度相同的数组对应元素相加\"><a href=\"#两个长度相同的数组对应元素相加\" class=\"headerlink\" title=\"两个长度相同的数组对应元素相加\"></a>两个长度相同的数组对应元素相加</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 对应元素相加\nlet arrayOne &#x3D; [1, 2, 3];\nlet arrayTwo &#x3D; [4, 5, 6];\nlet arrayThree &#x3D; arrayOne.map((item, index) &#x3D;&gt; item + arrayTwo[index]);\n&#x2F;&#x2F; [5, 7, 9]</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 对应元素相减 (arrayOne[i] - arrayTwo[i])\nlet arrayOne &#x3D; [1, 2, 3];\nlet arrayTwo &#x3D; [4, 5, 6];\nlet arrayThree &#x3D; arrayOne.map((item, index) &#x3D;&gt; item - arrayTwo[index]);\n&#x2F;&#x2F; [-3, -3, -3]</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 对应元素相乘\nlet arrayOne &#x3D; [1, 2, 3];\nlet arrayTwo &#x3D; [4, 5, 6];\nlet arrayThree &#x3D; arrayOne.map((item, index) &#x3D;&gt; item * arrayTwo[index]);\n&#x2F;&#x2F; [4, 10, 18]</code></pre>\n\n<h2 id=\"数组映射\"><a href=\"#数组映射\" class=\"headerlink\" title=\"数组映射\"></a>数组映射</h2><h3 id=\"位置-i-处-映射为前-i-个元素之和-0-处-映射为自身\"><a href=\"#位置-i-处-映射为前-i-个元素之和-0-处-映射为自身\" class=\"headerlink\" title=\"位置 i 处 映射为前 i 个元素之和 (0 处 映射为自身)\"></a>位置 i 处 映射为前 i 个元素之和 (0 处 映射为自身)</h3><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let arrayOne &#x3D; [1, 2, 3];\nlet arrayTwo &#x3D; arrayOne.map((item, index) &#x3D;&gt; arrayOne.slice(0, index + 1).reduce((previousValue, currentValue) &#x3D;&gt; previousValue + currentValue));\n&#x2F;&#x2F; [1, 3, 6]</code></pre>\n\n<h3 id=\"判断数组是否连续递增\"><a href=\"#判断数组是否连续递增\" class=\"headerlink\" title=\"判断数组是否连续递增\"></a>判断数组是否连续递增</h3><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let arrayOne &#x3D; [1, 2, 3];\nlet arrayTwo &#x3D; [1, 2, 4];\nfunction isIncrementalArray(array) &#123;\n    return array.every((item, index, array) &#x3D;&gt; item - array[index - 1] &#x3D;&#x3D;&#x3D; 1 || index &#x3D;&#x3D;&#x3D; 0);\n&#125;\nisIncrementalArray(arrayOne); &#x2F;&#x2F; true\nisIncrementalArray(arrayTwo); &#x2F;&#x2F; false</code></pre>\n\n<h3 id=\"判断数组是否有重复元素\"><a href=\"#判断数组是否有重复元素\" class=\"headerlink\" title=\"判断数组是否有重复元素\"></a>判断数组是否有重复元素</h3><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\"></code></pre>\n\n\n<h2 id=\"创建元素全为-0-的数组\"><a href=\"#创建元素全为-0-的数组\" class=\"headerlink\" title=\"创建元素全为 0 的数组\"></a>创建元素全为 0 的数组</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 1. 创建元素全为 0 的一维数组(长度为 10)\n&#x2F;&#x2F; 1.1 fill() 填充数组\nnew Array(10).fill(0); &#x2F;&#x2F; new 关键字可省略, 以下同\n&#x2F;&#x2F; 1.2 map() 数组映射\nnew Array(10).map((item) &#x3D;&gt; 0); &#x2F;&#x2F; [&lt;10 empty items&gt;]\n[...new Array(10)].map((item) &#x3D;&gt; 0); &#x2F;&#x2F; 扩展运算符\n&#x2F;&#x2F; 1.3 定型数组\nnew Int8Array(10); &#x2F;&#x2F; Int8Array(10) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n&#x2F;&#x2F; 定型数组转非定型数组\n&#x2F;&#x2F; 1.3.1 Array.from()\nArray.from(new Int8Array(10));\n&#x2F;&#x2F; 1.3.2 ... 扩展运算符\n[...new Int8Array(10)];\n&#x2F;&#x2F; 1.4 join() + split() + map()\nnew Array(11).join(0).split(&quot;&quot;).map((item) &#x3D;&gt; Number(item));\n\n\n&#x2F;&#x2F; 2. 创建元素全为 0 的二维数组(10 x 10)\n&#x2F;&#x2F; 2.1 fill() 填充数组\nnew Array(10).fill(new Array(10).fill(0));\n&#x2F;&#x2F; 2.2 map() 数组映射\n[...new Array(10)].map((item) &#x3D;&gt; new Array(10).fill(0));\n&#x2F;&#x2F; 2.3 定型数组\n&#x2F;&#x2F; 2.3.1 Array.from()\nArray.from(new Int8Array(10)).map((item) &#x3D;&gt; Array.from(new Int8Array(10)));\n&#x2F;&#x2F; 2.3.2 ... 扩展运算符\n[...new Int8Array(10)].map((item) &#x3D;&gt; [...new Int8Array(10)]);\n&#x2F;&#x2F; 2.4 join() + split() + map()\nnew Array(11).join(0).split(&quot;&quot;).map((item) &#x3D;&gt; new Array(11).join(0).split(&quot;&quot;).map((item) &#x3D;&gt; Number(item)));\n\nArray.from(&#123;length: 10&#125;, () &#x3D;&gt; new Array(10).fill(0));\n\n\n&#x2F;&#x2F; 3. 创建元素全为 0 的十维数组 (10 x 10 x 10 x 10 x 10 x 10 x 10 x 10 x 10 x 10)\n\n[0.1, 0.3, 0.6, 1].filter(item &#x3D;&gt; item &gt; 0.5)[0];\n[0.1, 0.3, 0.6, 1].findIndex(item &#x3D;&gt; item &gt; 0.5);\nrandomArray &#x3D; new Array(3).fill(0).map(item &#x3D;&gt; Math.random());\nrandomArray.map((randomArrayItem) &#x3D;&gt;[2, 4, 6][[0.1, 0.4, 1].findIndex(item &#x3D;&gt; item &gt; randomArrayItem)])\n\n</code></pre>\n\n\n\n<hr>\n","text":" 快速创建有规律数组 元素为 0 ~ 99 的数组&#x2F;&#x2F; new Array(100) 创建一个长度为 100 的空数组 (new 关键字可省略) &#x2F;&#x2F; keys() 返回数组索引的一个迭代器 &#x2F;&#x2F; Array.from(...","link":"","photos":[],"count_time":{"symbolsCount":"7.8k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"数组","slug":"数组","count":2,"path":"api/tags/数组.json"},{"name":"奇技淫巧","slug":"奇技淫巧","count":1,"path":"api/tags/奇技淫巧.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E6%9C%89%E8%A7%84%E5%BE%8B%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">快速创建有规律数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%B4%A0%E4%B8%BA-0-99-%E7%9A%84%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">元素为 0 ~ 99 的数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%B4%A0%E4%B8%BA-1-100-%E7%9A%84%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">元素为 1 ~ 100 的数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%B4%A0%E4%B8%BA%E6%8C%87%E5%AE%9A%E5%8C%BA%E9%97%B4-start-end-%E7%9A%84%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">元素为指定区间 [start, end] 的数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%83%E7%B4%A0%E4%B8%BA%E5%AD%97%E6%AF%8D%E8%A1%A8%E7%9A%84%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">元素为字母表的数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D\"><span class=\"toc-text\">数组去重</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%B9%B3%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">打平数组</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%A4%E4%B8%AA%E9%95%BF%E5%BA%A6%E7%9B%B8%E5%90%8C%E7%9A%84%E6%95%B0%E7%BB%84%E5%AF%B9%E5%BA%94%E5%85%83%E7%B4%A0%E7%9B%B8%E5%8A%A0\"><span class=\"toc-text\">两个长度相同的数组对应元素相加</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">数组映射</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E7%BD%AE-i-%E5%A4%84-%E6%98%A0%E5%B0%84%E4%B8%BA%E5%89%8D-i-%E4%B8%AA%E5%85%83%E7%B4%A0%E4%B9%8B%E5%92%8C-0-%E5%A4%84-%E6%98%A0%E5%B0%84%E4%B8%BA%E8%87%AA%E8%BA%AB\"><span class=\"toc-text\">位置 i 处 映射为前 i 个元素之和 (0 处 映射为自身)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E8%BF%9E%E7%BB%AD%E9%80%92%E5%A2%9E\"><span class=\"toc-text\">判断数组是否连续递增</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A4%E6%96%AD%E6%95%B0%E7%BB%84%E6%98%AF%E5%90%A6%E6%9C%89%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">判断数组是否有重复元素</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E5%85%83%E7%B4%A0%E5%85%A8%E4%B8%BA-0-%E7%9A%84%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">创建元素全为 0 的数组</span></a></li></ol></li></ol>","author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"LeetCode-剑指Offer-15-二进制中1的个数","uid":"6476889812499529d67e180547b73424","slug":"LeetCode-剑指Offer-15-二进制中1的个数","date":"2022-04-11T13:15:22.000Z","updated":"2022-04-12T13:54:57.734Z","comments":true,"path":"api/articles/LeetCode-剑指Offer-15-二进制中1的个数.json","keywords":null,"cover":null,"text":" 题目描述本题同 LeetCode-191-位1的个数。 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为 Hamming weight )。 示例1 输入：n &#x3D; 11 (控制台输入 0000000000...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":5,"path":"api/tags/LeetCode.json"},{"name":"剑指Offer","slug":"剑指Offer","count":1,"path":"api/tags/剑指Offer.json"},{"name":"二进制","slug":"二进制","count":1,"path":"api/tags/二进制.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"数独游戏设计与实现","uid":"145ad428fef705684e91c950833ed83f","slug":"数独游戏设计与实现","date":"2022-04-10T07:54:35.000Z","updated":"2022-04-11T17:37:03.712Z","comments":true,"path":"api/articles/数独游戏设计与实现.json","keywords":null,"cover":[],"text":" 数独简介数独起源数独分类 河图洛书 射雕英雄传 那女子沮丧失色, 身子摇了几摇, 突然一交跌在细沙之中, 双手捧头, 苦苦思索, 过了一会, 忽然抬起头来, 脸有喜色, 道：“你的算法自然精我百倍, 可是我问你：将一至九这九个数字排成三列, 不论纵横斜角, 每三字相加都是十五,...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":9,"path":"api/tags/JavaScript.json"},{"name":"数独","slug":"数独","count":1,"path":"api/tags/数独.json"},{"name":"suduku","slug":"suduku","count":1,"path":"api/tags/suduku.json"},{"name":"设计与实现","slug":"设计与实现","count":1,"path":"api/tags/设计与实现.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}