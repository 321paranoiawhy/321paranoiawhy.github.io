{"title":"LeetCode-53-Maximum-Subarray","uid":"8a91a6c7f25eaf2685bd06ff2df6a231","slug":"LeetCode-53-Maximum-Subarray","date":"2022-05-10T12:25:45.000Z","updated":"2022-05-10T12:31:47.840Z","comments":true,"path":"api/articles/LeetCode-53-Maximum-Subarray.json","keywords":null,"cover":null,"content":"<hr>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; LeetCode-53 https:&#x2F;&#x2F;leetcode.cn&#x2F;problems&#x2F;maximum-subarray&#x2F;\n&#x2F;&#x2F; 剑指Offer-42 https:&#x2F;&#x2F;leetcode.cn&#x2F;problems&#x2F;lian-xu-zi-shu-zu-de-zui-da-he-lcof&#x2F;\nlet maxSubArray &#x3D; function (nums) &#123;\n    &#x2F;&#x2F; 边界处理\n    if (nums.length &#x3D;&#x3D;&#x3D; 0) &#123; return 0; &#125;\n    if (nums.length &#x3D;&#x3D;&#x3D; 1) &#123; return nums[0]; &#125;\n    &#x2F;&#x2F; sum 和 max 初始化为首个元素 nums[0]\n    let sum &#x3D; nums[0];\n    let max &#x3D; nums[0];\n    for (let i &#x3D; 1; i &lt; nums.length; i++) &#123;\n        &#x2F;&#x2F; 如果当前和 sum 小于 0, 则当前和舍弃, 并置为当前元素 nums[i]\n        if (sum &lt; 0) &#123;\n            sum &#x3D; nums[i];\n        &#125;\n        &#x2F;&#x2F; 如果当前和 sum 大于 0, 则当前和 再加上 当前元素 nums[i]\n        else &#123;\n            sum +&#x3D; nums[i];\n        &#125;\n        &#x2F;&#x2F; 如果当前和 sum 大于 max, 则 max 置为当前和 sum\n        if (sum &gt; max) &#123;\n            max &#x3D; sum;\n        &#125;\n    &#125;\n    &#x2F;&#x2F; 返回结果 max\n    return max;\n&#125;\n\nlet numsOne &#x3D; [-2, 1, -3, 4, -1, 2, 1, -5, 4];\nconsole.log(maxSubArray(numsOne)); &#x2F;&#x2F; 6\n\nlet numsTwo &#x3D; [1];\nconsole.log(maxSubArray(numsTwo)); &#x2F;&#x2F; 1\n\nlet numsThree &#x3D; [5, 4, -1, 7, 8]\nconsole.log(maxSubArray(numsThree)); &#x2F;&#x2F; 23\n\nlet numsFour &#x3D; [3, -2, 1, 2, 4, -6, 5];\nconsole.log(maxSubArray(numsFour)); &#x2F;&#x2F; 8\n\n&#x2F;&#x2F; maxSubArray 函数重写 (override)\nmaxSubArray &#x3D; function (nums) &#123;\n    &#x2F;&#x2F; 边界处理\n    if (nums.length &#x3D;&#x3D;&#x3D; 0) &#123; return null; &#125;\n    if (nums.length &#x3D;&#x3D;&#x3D; 1) &#123; return &#96;[begin,end,max]: [$&#123;[0, 0, nums[0]]&#125;]&#96;; &#125;\n    &#x2F;&#x2F; sum 和 max 初始化为首个元素 nums[0]\n    let sum &#x3D; nums[0];\n    let max &#x3D; nums[0];\n    let begin &#x3D; 0;\n    let end &#x3D; 0;\n    for (let i &#x3D; 1; i &lt; nums.length; i++) &#123;\n        &#x2F;&#x2F; 如果当前和 sum 小于 0, 则当前和舍弃, 并置为当前元素 nums[i]\n        if (sum &lt; 0) &#123;\n            sum &#x3D; nums[i];\n            begin &#x3D; i;\n        &#125;\n        &#x2F;&#x2F; 如果当前和 sum 大于 0, 则当前和 再加上 当前元素 nums[i]\n        else &#123;\n            sum +&#x3D; nums[i];\n        &#125;\n        &#x2F;&#x2F; 如果当前和 sum 大于 max, 则 max 置为当前和 sum\n        if (sum &gt; max) &#123;\n            max &#x3D; sum;\n            end &#x3D; i;\n        &#125;\n    &#125;\n    &#x2F;&#x2F; 返回结果 max\n    &#x2F;&#x2F; return &#96;[begin,end,max]: [$&#123;begin, end, max&#125;] &#96;;\n    return &#96;[begin,end,max]: [$&#123;[begin, end, max]&#125;] &#96;;\n&#125;\n\n&#x2F;&#x2F; let numsOne &#x3D; [-2, 1, -3, 4, -1, 2, 1, -5, 4];\nconsole.log(maxSubArray(numsOne)); &#x2F;&#x2F; [begin,end,max]: [3, 6, 6]\n\n&#x2F;&#x2F; let numsTwo &#x3D; [1];\nconsole.log(maxSubArray(numsTwo)); &#x2F;&#x2F; [begin,end,max]: [0, 0, 1]\n\n&#x2F;&#x2F; let numsThree &#x3D; [5, 4, -1, 7, 8]\nconsole.log(maxSubArray(numsThree)); &#x2F;&#x2F; [begin,end,max]: [0, 4, 23]\n\n&#x2F;&#x2F; let numsFour &#x3D; [3, -2, 1, 2, 4, -6, 5];\nconsole.log(maxSubArray(numsFour)); &#x2F;&#x2F; [begin,end,max]: [0, 4, 8]</code></pre>\n\n<hr>\n","text":" &#x2F;&#x2F; LeetCode-53 https:&#x2F;&#x2F;leetcode.cn&#x2F;problems&#x2F;maximum-subarray&#x2F; &#x2F;&#x2F; 剑指Offer-42 https:&#x2F;&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":12,"path":"api/tags/JavaScript.json"},{"name":"LeetCode","slug":"LeetCode","count":5,"path":"api/tags/LeetCode.json"},{"name":"53","slug":"53","count":1,"path":"api/tags/53.json"},{"name":"最大子数组","slug":"最大子数组","count":1,"path":"api/tags/最大子数组.json"}],"toc":"","author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Google-Firebase分割线之CSS实现","uid":"03ddf2e0921f825cbeec21420e357a37","slug":"Google-Firebase分割线之CSS实现","date":"2022-05-11T06:53:59.000Z","updated":"2022-05-11T08:38:55.004Z","comments":true,"path":"api/articles/Google-Firebase分割线之CSS实现.json","keywords":null,"cover":[],"text":" 原效果Google-Firebase 单一的分割线之 CSS 实现利用 span 标签, 通过设定 display: inline-block; , 并设置其宽度为 1px, 高度为 30px, 即可实现分割线。 &lt;span class&#x3D;&quot;fireba...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"CSS","slug":"CSS","count":6,"path":"api/tags/CSS.json"},{"name":"Google","slug":"Google","count":1,"path":"api/tags/Google.json"},{"name":"Firebase","slug":"Firebase","count":1,"path":"api/tags/Firebase.json"},{"name":"分割线","slug":"分割线","count":1,"path":"api/tags/分割线.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"JavaScript数组连续n项的最大和","uid":"0be77bbaa4c80d723f54cec9a9ed8e0e","slug":"JavaScript数组连续n项的最大和","date":"2022-05-10T12:24:19.000Z","updated":"2022-05-10T12:30:48.116Z","comments":true,"path":"api/articles/JavaScript数组连续n项的最大和.json","keywords":null,"cover":null,"text":" &#x2F;&#x2F; 求数组连续 n 项的最大和 function nNumbersMaxSum(array, n) &#123; &#x2F;&#x2F; 假值处理 &#x2F;&#x2F; 第一种方式, 虽然去除了假值, 但其位置也被删除了, 新数组长度有所变化 let...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":12,"path":"api/tags/JavaScript.json"},{"name":"数组","slug":"数组","count":2,"path":"api/tags/数组.json"},{"name":"连续n项的最大和","slug":"连续n项的最大和","count":1,"path":"api/tags/连续n项的最大和.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}