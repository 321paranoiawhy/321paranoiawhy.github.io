{"title":"浅析JavaScript闭包","uid":"2de01c74f4b6265a85412f75c44f98bc","slug":"浅析JavaScript闭包","date":"2022-06-16T12:05:15.000Z","updated":"2022-06-17T05:34:09.626Z","comments":true,"path":"api/articles/浅析JavaScript闭包.json","keywords":null,"cover":null,"content":"<h1 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是<code>闭包</code></h1><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\">wikipedia - Closures (Computer Science)</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\">MDN - Closures</a></li>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312/1023021250770016\">廖雪峰 - 闭包</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html\">阮一峰 - 闭包</a></li>\n</ol>\n<p><code>函数对象</code>与<code>词法作用域</code>(<code>lexical scoping</code>, 一个包含函数所有变量的<code>对象</code>)绑定在一起解析函数变量的<code>机制</code>, 称为<code>闭包</code>。可以理解为闭包由<code>函数对象</code>及其<code>词法作用域</code>组成。</p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>闭包可简单理解为一个函数，它的作用域可以访问其他函数的变量, 即能访问其它函数内部变量的特殊函数。<br>闭包是函数作用域的副产品, 函数内部可以访问到函数外部的变量, 而这正是闭包的根本。</p>\n</div>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>注意这里的闭包指计算机科学中的闭包, 而非数学意义上的闭包: <a href=\"https://zh.wikipedia.org/wiki/%E9%97%AD%E5%8C%85_(%E6%95%B0%E5%AD%A6)\">wikipedia - Closures (Mathematics)</a>)</p>\n</div>\n<h2 id=\"函数内部变量-外部无法访问\"><a href=\"#函数内部变量-外部无法访问\" class=\"headerlink\" title=\"函数内部变量, 外部无法访问\"></a>函数内部变量, 外部无法访问</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function scope() &#123;\n    let name &#x3D; &quot;John&quot;;\n&#125;\nconsole.log(name); &#x2F;&#x2F; ReferenceError: name is not defined</code></pre>\n\n<h2 id=\"作用域链\"><a href=\"#作用域链\" class=\"headerlink\" title=\"作用域链\"></a>作用域链</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function checkScope() &#123;\n    let scope &#x3D; &quot;local scope&quot;;\n    function f() &#123;\n        return scope;\n    &#125;\n    return f();\n&#125;\nlet scope &#x3D; &quot;global scope&quot;;\nconsole.log(checkScope()); &#x2F;&#x2F; &quot;local scope&quot;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function checkScope() &#123;\n    function f() &#123;\n        return scope;\n    &#125;\n    return f();\n&#125;\nlet scope &#x3D; &quot;global scope&quot;;\nconsole.log(checkScope()); &#x2F;&#x2F; &quot;global scope&quot;</code></pre>\n\n<p>函数在执行时, 如果在当前词法作用域中找到了局部变量 <code>scope</code>, 则会使用该变量, 否则会继续往上查找直到找到全局变量<code>scope</code>。因而上述两段代码打印结果不同, 前者打印结果为 <code>&quot;local scope&quot;</code>, 而后者打印结果为 <code>&quot;global scope&quot;</code>。</p>\n<h2 id=\"全局变量值发生改变-且晚于函数声明\"><a href=\"#全局变量值发生改变-且晚于函数声明\" class=\"headerlink\" title=\"全局变量值发生改变, 且晚于函数声明\"></a>全局变量值发生改变, 且晚于函数声明</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let name &#x3D; &quot;John&quot;;\nfunction sayHi() &#123;\n    console.log(&quot;Hi, &quot; + name);\n&#125;\nname &#x3D; &quot;Pete&quot;;\nsayHi(); &#x2F;&#x2F; &quot;Hi, Pete&quot;</code></pre>\n\n<p>上例中,  <code>name</code> 在函数声明之后其值发生改变, 而函数内部使用过全局变量 <code>name</code>, 当执行函数 <code>sayHi()</code> 时, 打印结果为 <code>&quot;Hi, Pete&quot;</code>, 即函数会在其词法作用域中拿到(全局)变量的最新值。</p>\n<h2 id=\"函数内部局部变量\"><a href=\"#函数内部局部变量\" class=\"headerlink\" title=\"函数内部局部变量\"></a>函数内部局部变量</h2><p>来看两个例子:</p>\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 例 1\n&#x2F;&#x2F; 全局变量\nlet scope &#x3D; &quot;global scope&quot;;\nfunction checkScope() &#123;\n    &#x2F;&#x2F; 局部变量\n    let scope &#x3D; &quot;local scope&quot;;\n    function f() &#123;\n        return scope;\n    &#125;\n    &#x2F;&#x2F; 这里返回嵌套函数 f 的返回值\n    return f();\n    &#x2F;&#x2F; 或者\n    &#x2F;&#x2F; return function f() &#123;\n    &#x2F;&#x2F;     return scope;\n    &#x2F;&#x2F; &#125;();\n&#125;\nconsole.log(checkScope()); &#x2F;&#x2F; &quot;local scope&quot;\n&#x2F;&#x2F; 仍然为全局变量\nconsole.log(scope); &#x2F;&#x2F; &quot;global scope&quot;</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">&#x2F;&#x2F; 例 2\n&#x2F;&#x2F; 全局变量\nlet scope &#x3D; &quot;global scope&quot;;\nfunction checkScope() &#123;\n    &#x2F;&#x2F; 局部变量\n    let scope &#x3D; &quot;local scope&quot;;\n    function f() &#123;\n        return scope;\n    &#125;\n    &#x2F;&#x2F; 这里返回嵌套函数 f 本身, 而非其返回值\n    return f;\n&#125;\n&#x2F;&#x2F; 第二对括号表示执行函数, 即 f()\nconsole.log(checkScope()()); &#x2F;&#x2F; &quot;local scope&quot;\n&#x2F;&#x2F; 仍然为全局变量\nconsole.log(scope); &#x2F;&#x2F; &quot;global scope&quot;</code></pre>\n\n<h2 id=\"let-与-var\"><a href=\"#let-与-var\" class=\"headerlink\" title=\"let 与 var\"></a><code>let</code> 与 <code>var</code></h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">let x &#x3D; 1;\nfunction func() &#123;\n  console.log(x); &#x2F;&#x2F; ReferenceError: Cannot access &#39;x&#39; before initialization\n  let x &#x3D; 2;\n&#125;\nfunc();</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">var x &#x3D; 1;\nfunction func() &#123;\n    console.log(x);\n    &#x2F;&#x2F; 变量提升\n    var x &#x3D; 2;\n    console.log(x); &#x2F;&#x2F; 2\n&#125;\nfunc(); &#x2F;&#x2F; undefined</code></pre>\n\n<pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">for (let i &#x3D; 0; i &lt; 5; i++) &#123;\n    setTimeout(function timer() &#123;\n        &#x2F;&#x2F; 依次打印 &quot;let&quot; 0 &quot;let&quot; 1 &quot;let&quot; 2 &quot;let&quot; 3 &quot;let&quot; 4\n        console.log(&quot;let&quot;, i);\n         console.trace(i);\n    &#125;, 100);\n&#125;\nfor (var i &#x3D; 0; i &lt; 5; i++) &#123;\n    setTimeout(function timer() &#123;\n        &#x2F;&#x2F; 依次打印 &quot;var&quot; 5 &quot;var&quot; 5 &quot;var&quot; 5 &quot;var&quot; 5 &quot;var&quot; 5\n        console.log(&quot;var&quot;, i);\n         console.trace(i);\n    &#125;, 100);\n&#125;</code></pre>\n\n<h1 id=\"为何-JavaScript-函数天然闭包\"><a href=\"#为何-JavaScript-函数天然闭包\" class=\"headerlink\" title=\"为何 JavaScript 函数天然闭包\"></a>为何 <code>JavaScript</code> 函数天然闭包</h1><h2 id=\"例外-new-Function\"><a href=\"#例外-new-Function\" class=\"headerlink\" title=\"例外 new Function\"></a>例外 <code>new Function</code></h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\">function func() &#123;\n    let local &#x3D; &quot;local&quot;;\n    let newFunc &#x3D; new Function(&quot;return local&quot;);\n    return newFunc();\n&#125;\nfunc(); &#x2F;&#x2F; ReferenceError: local is not defined</code></pre>\n\n<h1 id=\"闭包的作用\"><a href=\"#闭包的作用\" class=\"headerlink\" title=\"闭包的作用\"></a>闭包的作用</h1><h2 id=\"隐藏变量-避免全局变量污染\"><a href=\"#隐藏变量-避免全局变量污染\" class=\"headerlink\" title=\"隐藏变量, 避免全局变量污染\"></a>隐藏变量, 避免全局变量污染</h2><pre class=\"line-numbers language-JavaScript\" data-language=\"JavaScript\"><code class=\"language-JavaScript\"></code></pre>\n\n\n\n\n","text":"什么是闭包 wikipedia - Closures (Computer Science) MDN - Closures 廖雪峰 - 闭包 阮一峰 - 闭包 函数对象与词法作用域(lexical scoping, 一个包含函数所有变量的对象)绑定在一起解析函数变量的机制, 称为闭...","link":"","photos":[],"count_time":{"symbolsCount":"3.7k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":12,"path":"api/tags/JavaScript.json"},{"name":"闭包","slug":"闭包","count":1,"path":"api/tags/闭包.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">什么是闭包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8%E5%8F%98%E9%87%8F-%E5%A4%96%E9%83%A8%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE\"><span class=\"toc-text\">函数内部变量, 外部无法访问</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE\"><span class=\"toc-text\">作用域链</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%80%BC%E5%8F%91%E7%94%9F%E6%94%B9%E5%8F%98-%E4%B8%94%E6%99%9A%E4%BA%8E%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">全局变量值发生改变, 且晚于函数声明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">函数内部局部变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#let-%E4%B8%8E-var\"><span class=\"toc-text\">let 与 var</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BD%95-JavaScript-%E5%87%BD%E6%95%B0%E5%A4%A9%E7%84%B6%E9%97%AD%E5%8C%85\"><span class=\"toc-text\">为何 JavaScript 函数天然闭包</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%A4%96-new-Function\"><span class=\"toc-text\">例外 new Function</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%97%AD%E5%8C%85%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">闭包的作用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%9A%90%E8%97%8F%E5%8F%98%E9%87%8F-%E9%81%BF%E5%85%8D%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E6%B1%A1%E6%9F%93\"><span class=\"toc-text\">隐藏变量, 避免全局变量污染</span></a></li></ol></li></ol>","author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"浅析JavaScript-console","uid":"e692960d6cb37ee98630bd23879210dd","slug":"浅析JavaScript-console","date":"2022-06-17T10:58:49.000Z","updated":"2022-06-17T12:56:22.880Z","comments":true,"path":"api/articles/浅析JavaScript-console.json","keywords":null,"cover":null,"text":"consoleconsole 是 一个 JavaScript 对象, 可以用来输出信息到控制台。不同的浏览器会各自实现 console。 typeof console; &#x2F;&#x2F; &quot;object&quot; 提示 WHATWG Chrome - Devt...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":12,"path":"api/tags/JavaScript.json"},{"name":"console","slug":"console","count":1,"path":"api/tags/console.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"LeetCode-415-Add-Strings","uid":"0828338e1d7b183bc1119e8371d142b5","slug":"LeetCode-415-Add-Strings","date":"2022-05-12T10:03:00.000Z","updated":"2022-05-12T11:02:00.530Z","comments":true,"path":"api/articles/LeetCode-415-Add-Strings.json","keywords":null,"cover":null,"text":" 题目描述给定两个字符串形式的非负整数 num1 和 num2 ，计算它们的和并同样以字符串形式返回。 你不能使用任何內建的用于处理大整数的库（比如 BigInteger）， 也不能直接将输入的字符串转换为整数形式。 示例 1: 输入：num1 &#x3D; “11”, num2...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":5,"path":"api/tags/LeetCode.json"},{"name":"415","slug":"415","count":1,"path":"api/tags/415.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}