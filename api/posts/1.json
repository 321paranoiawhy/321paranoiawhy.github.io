{"total":16,"pageSize":12,"pageCount":2,"data":[{"title":"使用Netlify实现自动化部署","uid":"efd5df9c3582a7fc2970cc06078f99a0","slug":"使用Netlify实现自动化部署","date":"2022-04-17T09:59:25.000Z","updated":"2022-04-17T10:57:14.443Z","comments":true,"path":"api/articles/使用Netlify实现自动化部署.json","cover":[],"text":" 准备工作 在 GitHub 上创建一个仓库 将本地代码上传至该仓库# 在本地目录右键点击 Git Bash Here # 初始化本地仓库, 使其变成一个本地的 Git 仓库 git init # 本地目录下新增一个 .git 文件夹 # 将本地目录所有文件添加到本地仓库 git...","link":"","photos":[],"count_time":{"symbolsCount":915,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Netlify","slug":"Netlify","count":1,"path":"api/tags/Netlify.json"},{"name":"自动化部署","slug":"自动化部署","count":1,"path":"api/tags/自动化部署.json"},{"name":"GitHub","slug":"GitHub","count":1,"path":"api/tags/GitHub.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"文字滚动的实现","uid":"0978c8b88ba6e3aab02deffaa34e6058","slug":"文字滚动的实现","date":"2022-04-14T17:28:14.000Z","updated":"2022-04-17T11:00:03.820Z","comments":true,"path":"api/articles/文字滚动的实现.json","cover":null,"text":"文字横向滚动HTML 实现HTML 提供了 &lt;marquee&gt; 元素用以插入一段可滚动的文字。 注意 &lt;marquee&gt; 元素已过时,请不要再使用它。 MDN- Can I use-HTML element: marquee &lt;!-- 默认效果 --...","link":"","photos":[],"count_time":{"symbolsCount":593,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":6,"path":"api/tags/JavaScript.json"},{"name":"文字滚动","slug":"文字滚动","count":1,"path":"api/tags/文字滚动.json"},{"name":"实现","slug":"实现","count":1,"path":"api/tags/实现.json"},{"name":"HTML","slug":"HTML","count":1,"path":"api/tags/HTML.json"},{"name":"CSS","slug":"CSS","count":1,"path":"api/tags/CSS.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"深入解析位运算性质","uid":"d59a8ff0fbd74225a125fea75d954925","slug":"深入解析位运算性质","date":"2022-04-12T09:29:31.000Z","updated":"2022-04-17T12:35:23.544Z","comments":true,"path":"api/articles/深入解析位运算性质.json","cover":null,"text":" 二进制回顾十进制整数转换为二进制十进制整数转换为二进制可采用 除2取余, 逆序排列 (短除法) ： Unknown environment 'table' \\begin{table}[] \\begin{tabular}{ccccccc} \\multicolumn{1}{c|}{...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"位运算","slug":"位运算","count":1,"path":"api/tags/位运算.json"},{"name":"深入解析","slug":"深入解析","count":1,"path":"api/tags/深入解析.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"精确覆盖问题","uid":"1001f33dad10400ea5f367d8a08e122a","slug":"精确覆盖问题","date":"2022-04-12T09:10:46.000Z","updated":"2022-04-12T09:12:34.442Z","comments":true,"path":"api/articles/精确覆盖问题.json","cover":null,"text":" 精确覆盖问题Exact cover wiki Dancing Links OI Wiki A Sudoku Solver in Java implementing Knuth’s Dancing Links Algorithm 数独规则回顾 每个格子只能填入 1 ~ 9 中的一...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"LeetCode-剑指Offer-15-二进制中1的个数","uid":"6476889812499529d67e180547b73424","slug":"LeetCode-剑指Offer-15-二进制中1的个数","date":"2022-04-11T13:15:22.000Z","updated":"2022-04-12T13:54:57.734Z","comments":true,"path":"api/articles/LeetCode-剑指Offer-15-二进制中1的个数.json","cover":null,"text":" 题目描述本题同 LeetCode-191-位1的个数。 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为 Hamming weight )。 示例1 输入：n &#x3D; 11 (控制台输入 0000000000...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":2,"path":"api/tags/LeetCode.json"},{"name":"剑指Offer","slug":"剑指Offer","count":1,"path":"api/tags/剑指Offer.json"},{"name":"二进制","slug":"二进制","count":1,"path":"api/tags/二进制.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JavaScript数组之奇技淫巧","uid":"91d29442500deeb82a763ac9ac0b6005","slug":"JavaScript数组之奇技淫巧","date":"2022-04-11T11:22:17.000Z","updated":"2022-04-11T17:07:44.952Z","comments":true,"path":"api/articles/JavaScript数组之奇技淫巧.json","cover":null,"text":" 快速创建有规律数组 元素为 0 ~ 99 的数组&#x2F;&#x2F; new Array(100) 创建一个长度为 100 的空数组 (new 关键字可省略) &#x2F;&#x2F; keys() 返回数组索引的一个迭代器 &#x2F;&#x2F; Array.from(...","link":"","photos":[],"count_time":{"symbolsCount":"4.8k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":6,"path":"api/tags/JavaScript.json"},{"name":"数组","slug":"数组","count":1,"path":"api/tags/数组.json"},{"name":"奇技淫巧","slug":"奇技淫巧","count":1,"path":"api/tags/奇技淫巧.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"数独游戏设计与实现","uid":"145ad428fef705684e91c950833ed83f","slug":"数独游戏设计与实现","date":"2022-04-10T07:54:35.000Z","updated":"2022-04-11T17:37:03.712Z","comments":true,"path":"api/articles/数独游戏设计与实现.json","cover":[],"text":" 数独简介数独起源数独分类 河图洛书 射雕英雄传 那女子沮丧失色, 身子摇了几摇, 突然一交跌在细沙之中, 双手捧头, 苦苦思索, 过了一会, 忽然抬起头来, 脸有喜色, 道：“你的算法自然精我百倍, 可是我问你：将一至九这九个数字排成三列, 不论纵横斜角, 每三字相加都是十五,...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":6,"path":"api/tags/JavaScript.json"},{"name":"数独","slug":"数独","count":1,"path":"api/tags/数独.json"},{"name":"suduku","slug":"suduku","count":1,"path":"api/tags/suduku.json"},{"name":"设计与实现","slug":"设计与实现","count":1,"path":"api/tags/设计与实现.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"pip安装第三方库报错","uid":"10790f82c593c2090a644c2eb357ae58","slug":"pip安装第三方库报错","date":"2022-04-09T16:51:26.000Z","updated":"2022-04-09T18:14:56.738Z","comments":true,"path":"api/articles/pip安装第三方库报错.json","cover":null,"text":" 报错示意# 安装第三方库 manim # 注意 package_name 为 manimgl (而非 manim) pip install manimgl WARNING: Retrying (Retry(total&#x3D;4, connect&#x3D;None, rea...","link":"","photos":[],"count_time":{"symbolsCount":"4.6k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"mainm","slug":"mainm","count":1,"path":"api/tags/mainm.json"},{"name":"pip","slug":"pip","count":1,"path":"api/tags/pip.json"},{"name":"python","slug":"python","count":1,"path":"api/tags/python.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"LeetCode-796-Rotate-String","uid":"afa662091cf53ca79a8858de12df085e","slug":"LeetCode-796-Rotate-String","date":"2022-04-07T14:48:10.000Z","updated":"2022-04-07T18:29:10.931Z","comments":true,"path":"api/articles/LeetCode-796-Rotate-String.json","cover":[],"text":" 题目描述LeetCode-796-Rotate-String Given two strings s and goal, return true if and only if s can become goal after some number of shifts on s....","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":2,"path":"api/tags/LeetCode.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JavaScript类型校验函数封装","uid":"327a088abef05846131669526f1edcfc","slug":"JavaScript类型校验函数封装","date":"2022-04-06T18:09:03.000Z","updated":"2022-04-07T10:53:34.953Z","comments":true,"path":"api/articles/JavaScript类型校验函数封装.json","cover":null,"text":"类型校验函数的封装&#x2F;&#x2F; JavaScript 类型校验 checkType 函数, 返回值为字符串类型 function typeCheck(value) &#123; &#x2F;&#x2F; 1. null &#x2F;&#x2F; typeof() 方法...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":6,"path":"api/tags/JavaScript.json"},{"name":"类型校验","slug":"类型校验","count":1,"path":"api/tags/类型校验.json"},{"name":"封装函数","slug":"封装函数","count":1,"path":"api/tags/封装函数.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"排序算法之JavaScript实现","uid":"0bbd469acde6df175f056490e56783a8","slug":"排序算法之JavaScript实现","date":"2022-03-30T08:29:25.000Z","updated":"2022-03-30T08:29:25.651Z","comments":true,"path":"api/articles/排序算法之JavaScript实现.json","cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"由LeetCode第一题两数之和说起","uid":"120b4f6647606fb186b9a22d3e519b62","slug":"由LeetCode第一题两数之和说起","date":"2022-03-28T17:36:49.000Z","updated":"2022-03-28T19:10:17.681Z","comments":true,"path":"api/articles/由LeetCode第一题两数之和说起.json","cover":null,"text":"题目描述基本描述: 给定一个整数数组 nums 和一个整数目标值 target，找出 数组 nums 中和为目标值 target 的那两个整数，并返回这个两个整数对应的数组下标。假定每种输入只会对应一个输出 (要么无解, 要么仅有一解), 且数组 nums 中元素具有唯一性。 基...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}