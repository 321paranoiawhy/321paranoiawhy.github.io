{"total":36,"pageSize":12,"pageCount":3,"data":[{"title":"LeetCode-415-Add-Strings","uid":"0828338e1d7b183bc1119e8371d142b5","slug":"LeetCode-415-Add-Strings","date":"2022-05-12T10:03:00.000Z","updated":"2022-05-12T11:02:00.530Z","comments":true,"path":"api/articles/LeetCode-415-Add-Strings.json","cover":null,"text":" 题目描述给定两个字符串形式的非负整数 num1 和 num2 ，计算它们的和并同样以字符串形式返回。 你不能使用任何內建的用于处理大整数的库（比如 BigInteger）， 也不能直接将输入的字符串转换为整数形式。 示例 1: 输入：num1 &#x3D; “11”, num2...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":5,"path":"api/tags/LeetCode.json"},{"name":"415","slug":"415","count":1,"path":"api/tags/415.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"LeetCpde-258-Add-Digits","uid":"27cd344dd8085af202d0af89a2be40ac","slug":"LeetCpde-258-Add-Digits","date":"2022-05-12T09:34:02.000Z","updated":"2022-05-12T10:00:40.060Z","comments":true,"path":"api/articles/LeetCpde-258-Add-Digits.json","cover":null,"text":" 题目描述给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。返回这个结果。 示例1: 输入: num &#x3D; 38输出: 2解释: 各位相加的过程为：38 –&gt; 3 + 8 –&gt; 1111 –&gt; 1 + 1 –&gt; 2由于 2 是一...","link":"","photos":[],"count_time":{"symbolsCount":988,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"LeetCode","slug":"LeetCode","count":5,"path":"api/tags/LeetCode.json"},{"name":"258","slug":"258","count":1,"path":"api/tags/258.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"MDN-TOC之CSS实现","uid":"a37d0a65a94985c4e63c4ca2b1855441","slug":"MDN-TOC之CSS实现","date":"2022-05-11T08:01:43.000Z","updated":"2022-05-11T15:12:42.198Z","comments":true,"path":"api/articles/MDN-TOC之CSS实现.json","cover":[],"text":" 原效果MDN-JavaScript 完整实现&lt;section&gt; &lt;h2&gt;In this article&lt;&#x2F;h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&quot;&gt;学习路线&l...","link":"","photos":[],"count_time":{"symbolsCount":738,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"CSS","slug":"CSS","count":6,"path":"api/tags/CSS.json"},{"name":"MDN","slug":"MDN","count":1,"path":"api/tags/MDN.json"},{"name":"TOC","slug":"TOC","count":1,"path":"api/tags/TOC.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Google-Firebase分割线之CSS实现","uid":"03ddf2e0921f825cbeec21420e357a37","slug":"Google-Firebase分割线之CSS实现","date":"2022-05-11T06:53:59.000Z","updated":"2022-05-11T08:38:55.004Z","comments":true,"path":"api/articles/Google-Firebase分割线之CSS实现.json","cover":[],"text":" 原效果Google-Firebase 单一的分割线之 CSS 实现利用 span 标签, 通过设定 display: inline-block; , 并设置其宽度为 1px, 高度为 30px, 即可实现分割线。 &lt;span class&#x3D;&quot;fireba...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"CSS","slug":"CSS","count":6,"path":"api/tags/CSS.json"},{"name":"Google","slug":"Google","count":1,"path":"api/tags/Google.json"},{"name":"Firebase","slug":"Firebase","count":1,"path":"api/tags/Firebase.json"},{"name":"分割线","slug":"分割线","count":1,"path":"api/tags/分割线.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"LeetCode-53-Maximum-Subarray","uid":"8a91a6c7f25eaf2685bd06ff2df6a231","slug":"LeetCode-53-Maximum-Subarray","date":"2022-05-10T12:25:45.000Z","updated":"2022-05-10T12:31:47.840Z","comments":true,"path":"api/articles/LeetCode-53-Maximum-Subarray.json","cover":null,"text":" &#x2F;&#x2F; LeetCode-53 https:&#x2F;&#x2F;leetcode.cn&#x2F;problems&#x2F;maximum-subarray&#x2F; &#x2F;&#x2F; 剑指Offer-42 https:&#x2F;&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":12,"path":"api/tags/JavaScript.json"},{"name":"LeetCode","slug":"LeetCode","count":5,"path":"api/tags/LeetCode.json"},{"name":"53","slug":"53","count":1,"path":"api/tags/53.json"},{"name":"最大子数组","slug":"最大子数组","count":1,"path":"api/tags/最大子数组.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JavaScript数组连续n项的最大和","uid":"0be77bbaa4c80d723f54cec9a9ed8e0e","slug":"JavaScript数组连续n项的最大和","date":"2022-05-10T12:24:19.000Z","updated":"2022-05-10T12:30:48.116Z","comments":true,"path":"api/articles/JavaScript数组连续n项的最大和.json","cover":null,"text":" &#x2F;&#x2F; 求数组连续 n 项的最大和 function nNumbersMaxSum(array, n) &#123; &#x2F;&#x2F; 假值处理 &#x2F;&#x2F; 第一种方式, 虽然去除了假值, 但其位置也被删除了, 新数组长度有所变化 let...","link":"","photos":[],"count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":12,"path":"api/tags/JavaScript.json"},{"name":"数组","slug":"数组","count":2,"path":"api/tags/数组.json"},{"name":"连续n项的最大和","slug":"连续n项的最大和","count":1,"path":"api/tags/连续n项的最大和.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"JavaScript代码运行时间","uid":"efcb9823b8515508e8265d986121fffd","slug":"JavaScript代码运行时间","date":"2022-05-08T11:10:35.000Z","updated":"2022-05-10T12:53:45.783Z","comments":true,"path":"api/articles/JavaScript代码运行时间.json","cover":null,"text":" 1. new Date().getTime()Date.prototype.getTime() let start &#x3D; new Date().getTime(); let end &#x3D; new Date().getTime(); console.log(&#9...","link":"","photos":[],"count_time":{"symbolsCount":500,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":12,"path":"api/tags/JavaScript.json"},{"name":"代码运行时间","slug":"代码运行时间","count":1,"path":"api/tags/代码运行时间.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"浅析JavaScript伪随机数","uid":"7a05243233c4da00dcd738ef38ccbf4e","slug":"浅析JavaScript伪随机数","date":"2022-04-24T12:30:47.000Z","updated":"2022-04-24T14:14:21.200Z","comments":true,"path":"api/articles/浅析JavaScript伪随机数.json","cover":null,"text":"Math.random()ECMAScript 21.3.2.27 Math.random (): 提示 Returns a Number value with positive sign, greater than or equal to +0 but strictly les...","link":"","photos":[],"count_time":{"symbolsCount":"3.8k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","count":12,"path":"api/tags/JavaScript.json"},{"name":"浅析","slug":"浅析","count":1,"path":"api/tags/浅析.json"},{"name":"伪随机数","slug":"伪随机数","count":1,"path":"api/tags/伪随机数.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"CSS之水平居中和垂直居中","uid":"dd3415ed6272950eb1b537c4a572c566","slug":"CSS之水平居中和垂直居中","date":"2022-04-22T01:53:12.000Z","updated":"2022-04-22T02:00:09.184Z","comments":true,"path":"api/articles/CSS之水平居中和垂直居中.json","cover":null,"text":"单一元素水平居中子元素相对于父元素居中","link":"","photos":[],"count_time":{"symbolsCount":19,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"CSS","slug":"CSS","count":6,"path":"api/tags/CSS.json"},{"name":"水平居中","slug":"水平居中","count":1,"path":"api/tags/水平居中.json"},{"name":"垂直居中","slug":"垂直居中","count":1,"path":"api/tags/垂直居中.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"MySQL入门","uid":"5820a12a0486c28e70cc00c5f4972f6a","slug":"MySQL入门","date":"2022-04-19T13:54:40.000Z","updated":"2022-04-19T15:04:04.796Z","comments":true,"path":"api/articles/MySQL入门.json","cover":null,"text":"MySQL入门资料 廖雪峰 MySQL 教程 数据库类型数据库按照数据结构来组织、存储和管理数据, 数据库一共有三种模型: 层次模型 网状模型 关系模型 关系数据库的关系模型基于数学理论建立, 由于其理解和使用上更简单方便, 因而获得了最广泛的应用。 关系数据库中的关系是通过主键...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[],"tags":[{"name":"入门","slug":"入门","count":2,"path":"api/tags/入门.json"},{"name":"MySQL","slug":"MySQL","count":1,"path":"api/tags/MySQL.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Vue从入门到入门","uid":"b136cd29120382e6f6f7ef13bfbcdd84","slug":"Vue从入门到入门","date":"2022-04-18T16:34:20.000Z","updated":"2022-06-16T13:29:57.923Z","comments":true,"path":"api/articles/Vue从入门到入门.json","cover":null,"text":"Vue 组织架构Vue 组件三大要素Vue 组件三大要素为: template, script 和 style, 分别对于前端三大件: HTML, CSS, JavaScript。 templatetemplate 是&quot;智能化&quot;的 HTML 模板。 scrip...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"入门","slug":"入门","count":2,"path":"api/tags/入门.json"},{"name":"Vue","slug":"Vue","count":1,"path":"api/tags/Vue.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"使用Netlify实现自动化部署","uid":"efd5df9c3582a7fc2970cc06078f99a0","slug":"使用Netlify实现自动化部署","date":"2022-04-17T09:59:25.000Z","updated":"2022-04-17T10:57:14.443Z","comments":true,"path":"api/articles/使用Netlify实现自动化部署.json","cover":[],"text":" 准备工作 在 GitHub 上创建一个仓库 将本地代码上传至该仓库# 在本地目录右键点击 Git Bash Here # 初始化本地仓库, 使其变成一个本地的 Git 仓库 git init # 本地目录下新增一个 .git 文件夹 # 将本地目录所有文件添加到本地仓库 git...","link":"","photos":[],"count_time":{"symbolsCount":915,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"Netlify","slug":"Netlify","count":1,"path":"api/tags/Netlify.json"},{"name":"自动化部署","slug":"自动化部署","count":1,"path":"api/tags/自动化部署.json"},{"name":"GitHub","slug":"GitHub","count":1,"path":"api/tags/GitHub.json"}],"author":{"name":"paranoia","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"https://321paranoiawhy.github.io","description":"生命不息, 笔耕不辍","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}