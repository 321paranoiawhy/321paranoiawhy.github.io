[{"id":"8ce4d5532548a1d84225026cef424457","title":"命令行初探.md","content":"cd 命令 (change directory)cd 命令主要用于切换当前目录。\ncd 语法cd [&#x2F;d] [&lt;drive&gt;:][&lt;path&gt;]\ncd [..]\nchdir [&#x2F;d] [&lt;drive&gt;:][&lt;path&gt;]\nchdir [..]\n\ncd 帮助文件cd &#x2F;?\n\n返回至当前盘的根目录cd \\\n\n切换至 D 盘四种方式均可:\nD:\ncd &#x2F;d D:\ncd &#x2F;d D:&#x2F;\ncd &#x2F;d D:\\\n\n直接切换至某文件夹以下将分别切换至 D: \\work 和 D: \\work\\work\\work\ncd &#x2F;d D:\\work\ncd &#x2F;d D:\\work\\work\\work\n\n间接切换至某文件夹先切换到指定盘再切换到该盘的子文件夹, 以下将切换至 D: \\work\nD:\ncd work\n\n进入上一级目录 (父目录)若一直重复以下代码, 将进入当前盘的根目录, 等同于 cd \\\ncd ..\n\nRead also:\n\nMicrosoft CD\n\nMS-DOS 命令列表\n\n\n查询 ip 地址ipconfig\nipconfig&#x2F;all\n查询软件版本 (version)当使用一个 - 时, 大多数软件使用大写 V 即 -V, 少数软件使用小写 v 即 -v; 当使用两个 -- 时, 使用小写 v 开头的全称 version 即 --version。某些软件 (如 git) 可能仅支持 --version 的查询方法。\npython -V\npython --version\n\nnode -v\nnode --version\nnpm -v\nnpm --version\n\ngit --version\n\nnpm (node package manager)npm (npm 官网) 是 Node.js 的软件包管理器。\nnpm init\n\n安装软件安装 jQuery:\nnpm install jquery\nnpm install jquery -g\n\n其中, g 表示全局 global。\n查询某个包的版本查询 npm 服务器上 jquery 的所有版本使用复数形式的 versions:\nnpm view jquery verisions\n\n查询 npm 服务器上 jquery 的最新版本使用单数形式的 version:\nnpm view jquery verision\n\n查询 npm 服务器上 jquery 的详细信息使用 info:\nnpm info jquery\n\n查询 本地 (当前项目) jquery 的信息使用 ls:\nnpm ls jquery\nnpm ls jquery -g\n\n如果尚未安装 jquery, 则返回 empty。\n运行程序使用系统指定目录系统指定目录指: C:/Windows 或 C:/Windows/System32, 只要程序在系统指定目录内, 就可以在命令行 (cmd) 中执行。使用 notepad 打开 test.txt 文件:\nnotepad test.txt\n\n使用绝对路径如果程序不在系统指定目录内, 则可以通过指定绝对路径运行程序。使用 python.exe 打开 test.py 文件\nC:&#x2F;Python&#x2F;python.exe test.py\n\n或者调用相应的程序直接执行:\npython test.py\n\njavac test.java\njava test\n\nnode test.js\n\ngcc test.c -o test.exe\ntest\n\npython (.py) 脚本文件 可直接运行; java (.java) 文件 须使用 javac 编译生成 .class 文件, 再使用 java 执行 .class 文件; javascript (.js) 文件使用 node 直接运行; c (.c) 文件使用 gcc xx.c -o xx.exe 编译生成, 再使用 xx 即可执行文件。\n","slug":"命令行初探","date":"2022-03-24T15:01:36.000Z","categories_index":"","tags_index":"命令行,cd命令,npm","author_index":"Aurora"},{"id":"39a7541206c4f42537d81e311b664767","title":"JavaScript 类型判断","content":"JavaScript类型基本类型JavaScript基本类型有 6 种: Undefined、Null、Boolean、Number、String、Symbol 和 BigInt, 其中Symbol为 ECMAScript 6 新增类型。\n引用类型JavaScript引用类型仅 Object 一种。 对象指内存中可以被标识符引用的一块区域, 在 JavaScript 中, 对象还可被视为一个无序键值对的集合 (散列表), 是某个特定引用类型的实例, 通常可使用 new 关键字后接构造函数 (constructor)创建:\nlet dateObject &#x3D; new Date(); &#x2F;&#x2F; 日期对象\nlet regExpObject &#x3D; new RegExp([0-9]); &#x2F;&#x2F; 正则表达式对象\nlet object &#x3D; new Object(); &#x2F;&#x2F; 自定义对象\nlet functionObject &#x3D; new Function(); &#x2F;&#x2F; 函数对象\nlet symbolObject &#x3D; new Symbol(); &#x2F;&#x2F; 符号对象\nlet booleanObject &#x3D; new Boolean(); &#x2F;&#x2F; Boolean 对象\nlet numberObject &#x3D; new Number(); &#x2F;&#x2F; Number 对象\nlet stringObject &#x3D; new String(); &#x2F;&#x2F; String 对象\nlet arrayObject &#x3D; new Array(); &#x2F;&#x2F; Array 对象\nlet mapObject &#x3D; new Map(); &#x2F;&#x2F; Map 对象\nlet weakMapObject &#x3D; new WeakMap(); &#x2F;&#x2F; WeakMap 对象\nlet setObject &#x3D; new Set(); &#x2F;&#x2F; Set 对象\nlet weakSetObject &#x3D; new WeakSet(); &#x2F;&#x2F; WeakSet 对象\n\n其中:\n\nBoolean、Number 和 String 对象为 JavaScript 的三大原始值包装类型, 每个原始值包装类型均映射到对应的同名原始类型, 如 Boolean 是对应数值的引用类型。\nMap、WeakMap、Set 和 WeakSet 对象为 JavaScript 键控集 (keyed collections), 这些数据结构把对象的引用作为键。\n\nBigInt 对象BigInt 对象可通过 BigInt 函数生成 BigInt 类型的整数, 用以精确表示任意位数的整数。\n\nBigInt 函数不能连同 new 关键字使用:let bigIntObject &#x3D; new BigInt(1); &#x2F;&#x2F; TypeError: BigInt is not a constructor\nBigInt 构造函数必须有参数, 且若参数不是 Number 类型, 将会自动调用 Number() 转换规则将其转换为 BigInt。无法解析成 Number 类型的参数 (如字符串) 或参数为小数, 均会报错。\n\nBigInt(); &#x2F;&#x2F; TypeError: Cannot convert undefined to a BigInt\nBigInt(undefined); &#x2F;&#x2F; TypeError: Cannot convert undefined to a BigInt\nBigInt(null); &#x2F;&#x2F; TypeError: Cannot convert null to a BigInt\nBigInt(&quot;1a&quot;); &#x2F;&#x2F; SyntaxError: Cannot convert 1a to a BigInt\nBigInt(1.5); &#x2F;&#x2F; RangeError: The number 1.5 cannot be converted to a BigInt because it is not an integer\nBigInt(1); &#x2F;&#x2F; 1n\nBigInt(true); &#x2F;&#x2F; 1n\nBigInt(false); &#x2F;&#x2F; 0n\n\nBigInt 不可与 Number 混合操作, 若需要，则需使用 BigInt() 或 Number() 显示转换为同一类型后再执行相应操作。1n + 1; &#x2F;&#x2F; TypeError: Cannot mix BigInt and other types, use explicit conversions\n1n + BigInt(1); &#x2F;&#x2F; 2n\nNumber(1n) + 1; &#x2F;&#x2F; 2\nMath.sqrt(4n); &#x2F;&#x2F; TypeError: Cannot convert a BigInt to a number\n类型判断。Object.prototype.toString.call(BigInt(1)); &#x2F;&#x2F; &quot;[object BigInt]&quot;\nObject.prototype.toString.call(1n); &#x2F;&#x2F; &quot;[object BigInt]&quot;\nObject.prototype.toString.call(BigInt); &#x2F;&#x2F; &quot;[object Function]&quot;\ntypeof 1n; &#x2F;&#x2F; &quot;bigint&quot;\ntypeof BigInt(1); &#x2F;&#x2F; &quot;bigint&quot;\ntypeof Object(1n); &#x2F;&#x2F; &quot;object&quot;\ntypeof 1n &#x3D;&#x3D;&#x3D; typeof BigInt(1); &#x2F;&#x2F; true\ntypeof 1n &#x3D;&#x3D;&#x3D; typeof Object(1n); &#x2F;&#x2F; false\n\nGlobal 对象和 Math 对象JavaScript 内置对象指任何由 ECMAScript 6 实现提供且与宿主环境无关, 在 ECMAScript 程序开始执行时便已存在的对象, 有 Global 和 Math 两个内置对象。\nGlobal 对象是 JavaScript 中最为特别的对象: 在大多数 ECMAScript 实现中无法直接访问, 为兜底对象, 浏览器将 Global 对象实现为 window 对象。在全局作用域中定义的变量和函数都会变成 Global 对象的属性。\nMath 对象为数学常数和函数提供了静态属性和静态方法, 它没有其他 JavaScript 对象类似的构造函数 Math(), 无须实例化, 所有属性和方法可直接在 Math 对象上调用。Math 对象不是函数对象:\nObject.prototype.toString.call(Math); &#x2F;&#x2F; &quot;[object Math]&quot;\nObject.prototype.toString.call(Math.sin); &#x2F;&#x2F; &quot;[object Function]&quot;\nObject.prototype.toString.call(Math.sin()); &#x2F;&#x2F; &quot;[object Number]&quot;\n\n\n\n\n基本类型与引用类型的异同","slug":"JavaScript-类型判断","date":"2022-03-22T19:40:32.000Z","categories_index":"","tags_index":"","author_index":"Aurora"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-03-21T17:35:10.971Z","categories_index":"","tags_index":"","author_index":"Aurora"}]